/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { Fault, Upload } from "../models/index";
import {
  FaultFromJSON,
  FaultToJSON,
  UploadFromJSON,
  UploadToJSON,
} from "../models/index";

export interface CreateUploadRequest {
  file?: Blob;
  name?: string;
  description?: string;
  trainer?: string;
  commute?: string;
  dataType?: CreateUploadDataTypeEnum;
  externalId?: string;
}

export interface GetUploadByIdRequest {
  uploadId: number;
}

/**
 *
 */
export class UploadsApi extends runtime.BaseAPI {
  /**
   * Uploads a new data file to create an activity from. Requires activity:write scope.
   * Upload Activity
   */
  async createUploadRaw(
    requestParameters: CreateUploadRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Upload>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const consumes: runtime.Consume[] = [
      { contentType: "multipart/form-data" },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters["file"] != null) {
      formParams.append("file", requestParameters["file"] as any);
    }

    if (requestParameters["name"] != null) {
      formParams.append("name", requestParameters["name"] as any);
    }

    if (requestParameters["description"] != null) {
      formParams.append("description", requestParameters["description"] as any);
    }

    if (requestParameters["trainer"] != null) {
      formParams.append("trainer", requestParameters["trainer"] as any);
    }

    if (requestParameters["commute"] != null) {
      formParams.append("commute", requestParameters["commute"] as any);
    }

    if (requestParameters["dataType"] != null) {
      formParams.append("data_type", requestParameters["dataType"] as any);
    }

    if (requestParameters["externalId"] != null) {
      formParams.append("external_id", requestParameters["externalId"] as any);
    }

    const response = await this.request(
      {
        path: `/uploads`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UploadFromJSON(jsonValue),
    );
  }

  /**
   * Uploads a new data file to create an activity from. Requires activity:write scope.
   * Upload Activity
   */
  async createUpload(
    requestParameters: CreateUploadRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Upload> {
    const response = await this.createUploadRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns an upload for a given identifier. Requires activity:write scope.
   * Get Upload
   */
  async getUploadByIdRaw(
    requestParameters: GetUploadByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Upload>> {
    if (requestParameters["uploadId"] == null) {
      throw new runtime.RequiredError(
        "uploadId",
        'Required parameter "uploadId" was null or undefined when calling getUploadById().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/uploads/{uploadId}`.replace(
          `{${"uploadId"}}`,
          encodeURIComponent(String(requestParameters["uploadId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UploadFromJSON(jsonValue),
    );
  }

  /**
   * Returns an upload for a given identifier. Requires activity:write scope.
   * Get Upload
   */
  async getUploadById(
    requestParameters: GetUploadByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Upload> {
    const response = await this.getUploadByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}

/**
 * @export
 */
export const CreateUploadDataTypeEnum = {
  Fit: "fit",
  FitGz: "fit.gz",
  Tcx: "tcx",
  TcxGz: "tcx.gz",
  Gpx: "gpx",
  GpxGz: "gpx.gz",
} as const;
export type CreateUploadDataTypeEnum =
  (typeof CreateUploadDataTypeEnum)[keyof typeof CreateUploadDataTypeEnum];
