/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { ActivityType } from "./ActivityType";
import {
  ActivityTypeFromJSON,
  ActivityTypeFromJSONTyped,
  ActivityTypeToJSON,
} from "./ActivityType";
import type { MetaAthlete } from "./MetaAthlete";
import {
  MetaAthleteFromJSON,
  MetaAthleteFromJSONTyped,
  MetaAthleteToJSON,
} from "./MetaAthlete";
import type { SportType } from "./SportType";
import {
  SportTypeFromJSON,
  SportTypeFromJSONTyped,
  SportTypeToJSON,
} from "./SportType";

/**
 *
 * @export
 * @interface ClubActivity
 */
export interface ClubActivity {
  /**
   *
   * @type {MetaAthlete}
   * @memberof ClubActivity
   */
  athlete?: MetaAthlete;
  /**
   * The name of the activity
   * @type {string}
   * @memberof ClubActivity
   */
  name?: string;
  /**
   * The activity's distance, in meters
   * @type {number}
   * @memberof ClubActivity
   */
  distance?: number;
  /**
   * The activity's moving time, in seconds
   * @type {number}
   * @memberof ClubActivity
   */
  movingTime?: number;
  /**
   * The activity's elapsed time, in seconds
   * @type {number}
   * @memberof ClubActivity
   */
  elapsedTime?: number;
  /**
   * The activity's total elevation gain.
   * @type {number}
   * @memberof ClubActivity
   */
  totalElevationGain?: number;
  /**
   *
   * @type {ActivityType}
   * @memberof ClubActivity
   */
  type?: ActivityType;
  /**
   *
   * @type {SportType}
   * @memberof ClubActivity
   */
  sportType?: SportType;
  /**
   * The activity's workout type
   * @type {number}
   * @memberof ClubActivity
   */
  workoutType?: number;
}

/**
 * Check if a given object implements the ClubActivity interface.
 */
export function instanceOfClubActivity(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function ClubActivityFromJSON(json: any): ClubActivity {
  return ClubActivityFromJSONTyped(json, false);
}

export function ClubActivityFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ClubActivity {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    athlete: !exists(json, "athlete")
      ? undefined
      : MetaAthleteFromJSON(json["athlete"]),
    name: !exists(json, "name") ? undefined : json["name"],
    distance: !exists(json, "distance") ? undefined : json["distance"],
    movingTime: !exists(json, "moving_time") ? undefined : json["moving_time"],
    elapsedTime: !exists(json, "elapsed_time")
      ? undefined
      : json["elapsed_time"],
    totalElevationGain: !exists(json, "total_elevation_gain")
      ? undefined
      : json["total_elevation_gain"],
    type: !exists(json, "type")
      ? undefined
      : ActivityTypeFromJSON(json["type"]),
    sportType: !exists(json, "sport_type")
      ? undefined
      : SportTypeFromJSON(json["sport_type"]),
    workoutType: !exists(json, "workout_type")
      ? undefined
      : json["workout_type"],
  };
}

export function ClubActivityToJSON(value?: ClubActivity | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    athlete: MetaAthleteToJSON(value.athlete),
    name: value.name,
    distance: value.distance,
    moving_time: value.movingTime,
    elapsed_time: value.elapsedTime,
    total_elevation_gain: value.totalElevationGain,
    type: ActivityTypeToJSON(value.type),
    sport_type: SportTypeToJSON(value.sportType),
    workout_type: value.workoutType,
  };
}
