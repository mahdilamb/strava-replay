/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface GetBreathingRateSummaryByDateRequest {
  date: Date;
}

export interface GetBreathingRateSummaryByIntervalRequest {
  startDate: Date;
  endDate: Date;
}

/**
 *
 */
export class BreathingRateApi extends runtime.BaseAPI {
  /**
   * This endpoint returns average breathing rate data for a single date. Breathing Rate data applies specifically to a user’s “main sleep,” which is the longest single period of time during which they were asleep on a given date.
   * Get Breathing Rate Summary by Date
   */
  async getBreathingRateSummaryByDateRaw(
    requestParameters: GetBreathingRateSummaryByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getBreathingRateSummaryByDate.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["respiratory_rate"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/br/date/{date}.json`.replace(
          `{${"date"}}`,
          encodeURIComponent(String(requestParameters.date)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * This endpoint returns average breathing rate data for a single date. Breathing Rate data applies specifically to a user’s “main sleep,” which is the longest single period of time during which they were asleep on a given date.
   * Get Breathing Rate Summary by Date
   */
  async getBreathingRateSummaryByDate(
    requestParameters: GetBreathingRateSummaryByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getBreathingRateSummaryByDateRaw(
      requestParameters,
      initOverrides,
    );
  }

  /**
   * This endpoint returns average breathing rate data for a date range. Breathing Rate data applies specifically to a user’s “main sleep,” which is the longest single period of time during which they were asleep on a given date.
   * Get Breathing Rate Summary by Interval
   */
  async getBreathingRateSummaryByIntervalRaw(
    requestParameters: GetBreathingRateSummaryByIntervalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.startDate === null ||
      requestParameters.startDate === undefined
    ) {
      throw new runtime.RequiredError(
        "startDate",
        "Required parameter requestParameters.startDate was null or undefined when calling getBreathingRateSummaryByInterval.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getBreathingRateSummaryByInterval.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["respiratory_rate"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/br/date/{startDate}/{endDate}.json`
          .replace(
            `{${"startDate"}}`,
            encodeURIComponent(String(requestParameters.startDate)),
          )
          .replace(
            `{${"endDate"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * This endpoint returns average breathing rate data for a date range. Breathing Rate data applies specifically to a user’s “main sleep,” which is the longest single period of time during which they were asleep on a given date.
   * Get Breathing Rate Summary by Interval
   */
  async getBreathingRateSummaryByInterval(
    requestParameters: GetBreathingRateSummaryByIntervalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getBreathingRateSummaryByIntervalRaw(
      requestParameters,
      initOverrides,
    );
  }
}
