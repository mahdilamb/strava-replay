/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SummarySegmentEffort } from "./SummarySegmentEffort";
import {
  SummarySegmentEffortFromJSON,
  SummarySegmentEffortFromJSONTyped,
  SummarySegmentEffortToJSON,
  SummarySegmentEffortToJSONTyped,
} from "./SummarySegmentEffort";
import type { PolylineMap } from "./PolylineMap";
import {
  PolylineMapFromJSON,
  PolylineMapFromJSONTyped,
  PolylineMapToJSON,
  PolylineMapToJSONTyped,
} from "./PolylineMap";
import type { SummaryPRSegmentEffort } from "./SummaryPRSegmentEffort";
import {
  SummaryPRSegmentEffortFromJSON,
  SummaryPRSegmentEffortFromJSONTyped,
  SummaryPRSegmentEffortToJSON,
  SummaryPRSegmentEffortToJSONTyped,
} from "./SummaryPRSegmentEffort";

/**
 *
 * @export
 * @interface DetailedSegment
 */
export interface DetailedSegment {
  /**
   * The unique identifier of this segment
   * @type {number}
   * @memberof DetailedSegment
   */
  id?: number;
  /**
   * The name of this segment
   * @type {string}
   * @memberof DetailedSegment
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof DetailedSegment
   */
  activityType?: DetailedSegmentActivityTypeEnum;
  /**
   * The segment's distance, in meters
   * @type {number}
   * @memberof DetailedSegment
   */
  distance?: number;
  /**
   * The segment's average grade, in percents
   * @type {number}
   * @memberof DetailedSegment
   */
  averageGrade?: number;
  /**
   * The segments's maximum grade, in percents
   * @type {number}
   * @memberof DetailedSegment
   */
  maximumGrade?: number;
  /**
   * The segments's highest elevation, in meters
   * @type {number}
   * @memberof DetailedSegment
   */
  elevationHigh?: number;
  /**
   * The segments's lowest elevation, in meters
   * @type {number}
   * @memberof DetailedSegment
   */
  elevationLow?: number;
  /**
   * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type {Array<number>}
   * @memberof DetailedSegment
   */
  startLatlng?: Array<number>;
  /**
   * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type {Array<number>}
   * @memberof DetailedSegment
   */
  endLatlng?: Array<number>;
  /**
   * The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category.
   * @type {number}
   * @memberof DetailedSegment
   */
  climbCategory?: number;
  /**
   * The segments's city.
   * @type {string}
   * @memberof DetailedSegment
   */
  city?: string;
  /**
   * The segments's state or geographical region.
   * @type {string}
   * @memberof DetailedSegment
   */
  state?: string;
  /**
   * The segment's country.
   * @type {string}
   * @memberof DetailedSegment
   */
  country?: string;
  /**
   * Whether this segment is private.
   * @type {boolean}
   * @memberof DetailedSegment
   */
  _private?: boolean;
  /**
   *
   * @type {SummaryPRSegmentEffort}
   * @memberof DetailedSegment
   */
  athletePrEffort?: SummaryPRSegmentEffort;
  /**
   *
   * @type {SummarySegmentEffort}
   * @memberof DetailedSegment
   */
  athleteSegmentStats?: SummarySegmentEffort;
  /**
   * The time at which the segment was created.
   * @type {Date}
   * @memberof DetailedSegment
   */
  createdAt?: Date;
  /**
   * The time at which the segment was last updated.
   * @type {Date}
   * @memberof DetailedSegment
   */
  updatedAt?: Date;
  /**
   * The segment's total elevation gain.
   * @type {number}
   * @memberof DetailedSegment
   */
  totalElevationGain?: number;
  /**
   *
   * @type {PolylineMap}
   * @memberof DetailedSegment
   */
  map?: PolylineMap;
  /**
   * The total number of efforts for this segment
   * @type {number}
   * @memberof DetailedSegment
   */
  effortCount?: number;
  /**
   * The number of unique athletes who have an effort for this segment
   * @type {number}
   * @memberof DetailedSegment
   */
  athleteCount?: number;
  /**
   * Whether this segment is considered hazardous
   * @type {boolean}
   * @memberof DetailedSegment
   */
  hazardous?: boolean;
  /**
   * The number of stars for this segment
   * @type {number}
   * @memberof DetailedSegment
   */
  starCount?: number;
}

/**
 * @export
 */
export const DetailedSegmentActivityTypeEnum = {
  Ride: "Ride",
  Run: "Run",
} as const;
export type DetailedSegmentActivityTypeEnum =
  (typeof DetailedSegmentActivityTypeEnum)[keyof typeof DetailedSegmentActivityTypeEnum];

/**
 * Check if a given object implements the DetailedSegment interface.
 */
export function instanceOfDetailedSegment(
  value: object,
): value is DetailedSegment {
  return true;
}

export function DetailedSegmentFromJSON(json: any): DetailedSegment {
  return DetailedSegmentFromJSONTyped(json, false);
}

export function DetailedSegmentFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): DetailedSegment {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"] == null ? undefined : json["id"],
    name: json["name"] == null ? undefined : json["name"],
    activityType:
      json["activity_type"] == null ? undefined : json["activity_type"],
    distance: json["distance"] == null ? undefined : json["distance"],
    averageGrade:
      json["average_grade"] == null ? undefined : json["average_grade"],
    maximumGrade:
      json["maximum_grade"] == null ? undefined : json["maximum_grade"],
    elevationHigh:
      json["elevation_high"] == null ? undefined : json["elevation_high"],
    elevationLow:
      json["elevation_low"] == null ? undefined : json["elevation_low"],
    startLatlng:
      json["start_latlng"] == null ? undefined : json["start_latlng"],
    endLatlng: json["end_latlng"] == null ? undefined : json["end_latlng"],
    climbCategory:
      json["climb_category"] == null ? undefined : json["climb_category"],
    city: json["city"] == null ? undefined : json["city"],
    state: json["state"] == null ? undefined : json["state"],
    country: json["country"] == null ? undefined : json["country"],
    _private: json["private"] == null ? undefined : json["private"],
    athletePrEffort:
      json["athlete_pr_effort"] == null
        ? undefined
        : SummaryPRSegmentEffortFromJSON(json["athlete_pr_effort"]),
    athleteSegmentStats:
      json["athlete_segment_stats"] == null
        ? undefined
        : SummarySegmentEffortFromJSON(json["athlete_segment_stats"]),
    createdAt:
      json["created_at"] == null ? undefined : new Date(json["created_at"]),
    updatedAt:
      json["updated_at"] == null ? undefined : new Date(json["updated_at"]),
    totalElevationGain:
      json["total_elevation_gain"] == null
        ? undefined
        : json["total_elevation_gain"],
    map: json["map"] == null ? undefined : PolylineMapFromJSON(json["map"]),
    effortCount:
      json["effort_count"] == null ? undefined : json["effort_count"],
    athleteCount:
      json["athlete_count"] == null ? undefined : json["athlete_count"],
    hazardous: json["hazardous"] == null ? undefined : json["hazardous"],
    starCount: json["star_count"] == null ? undefined : json["star_count"],
  };
}

export function DetailedSegmentToJSON(json: any): DetailedSegment {
  return DetailedSegmentToJSONTyped(json, false);
}

export function DetailedSegmentToJSONTyped(
  value?: DetailedSegment | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    name: value["name"],
    activity_type: value["activityType"],
    distance: value["distance"],
    average_grade: value["averageGrade"],
    maximum_grade: value["maximumGrade"],
    elevation_high: value["elevationHigh"],
    elevation_low: value["elevationLow"],
    start_latlng: value["startLatlng"],
    end_latlng: value["endLatlng"],
    climb_category: value["climbCategory"],
    city: value["city"],
    state: value["state"],
    country: value["country"],
    private: value["_private"],
    athlete_pr_effort: SummaryPRSegmentEffortToJSON(value["athletePrEffort"]),
    athlete_segment_stats: SummarySegmentEffortToJSON(
      value["athleteSegmentStats"],
    ),
    created_at:
      value["createdAt"] == null ? undefined : value["createdAt"].toISOString(),
    updated_at:
      value["updatedAt"] == null ? undefined : value["updatedAt"].toISOString(),
    total_elevation_gain: value["totalElevationGain"],
    map: PolylineMapToJSON(value["map"]),
    effort_count: value["effortCount"],
    athlete_count: value["athleteCount"],
    hazardous: value["hazardous"],
    star_count: value["starCount"],
  };
}
