/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 *
 * @export
 * @interface SummarySegmentEffort
 */
export interface SummarySegmentEffort {
  /**
   * The unique identifier of this effort
   * @type {number}
   * @memberof SummarySegmentEffort
   */
  id?: number;
  /**
   * The unique identifier of the activity related to this effort
   * @type {number}
   * @memberof SummarySegmentEffort
   */
  activityId?: number;
  /**
   * The effort's elapsed time
   * @type {number}
   * @memberof SummarySegmentEffort
   */
  elapsedTime?: number;
  /**
   * The time at which the effort was started.
   * @type {Date}
   * @memberof SummarySegmentEffort
   */
  startDate?: Date;
  /**
   * The time at which the effort was started in the local timezone.
   * @type {Date}
   * @memberof SummarySegmentEffort
   */
  startDateLocal?: Date;
  /**
   * The effort's distance in meters
   * @type {number}
   * @memberof SummarySegmentEffort
   */
  distance?: number;
  /**
   * Whether this effort is the current best on the leaderboard
   * @type {boolean}
   * @memberof SummarySegmentEffort
   */
  isKom?: boolean;
}

/**
 * Check if a given object implements the SummarySegmentEffort interface.
 */
export function instanceOfSummarySegmentEffort(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function SummarySegmentEffortFromJSON(json: any): SummarySegmentEffort {
  return SummarySegmentEffortFromJSONTyped(json, false);
}

export function SummarySegmentEffortFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SummarySegmentEffort {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, "id") ? undefined : json["id"],
    activityId: !exists(json, "activity_id") ? undefined : json["activity_id"],
    elapsedTime: !exists(json, "elapsed_time")
      ? undefined
      : json["elapsed_time"],
    startDate: !exists(json, "start_date")
      ? undefined
      : new Date(json["start_date"]),
    startDateLocal: !exists(json, "start_date_local")
      ? undefined
      : new Date(json["start_date_local"]),
    distance: !exists(json, "distance") ? undefined : json["distance"],
    isKom: !exists(json, "is_kom") ? undefined : json["is_kom"],
  };
}

export function SummarySegmentEffortToJSON(
  value?: SummarySegmentEffort | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    activity_id: value.activityId,
    elapsed_time: value.elapsedTime,
    start_date:
      value.startDate === undefined ? undefined : value.startDate.toISOString(),
    start_date_local:
      value.startDateLocal === undefined
        ? undefined
        : value.startDateLocal.toISOString(),
    distance: value.distance,
    is_kom: value.isKom,
  };
}
