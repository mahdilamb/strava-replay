/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface GetActivitiesResourceByDatePeriodRequest {
  resourcePath: GetActivitiesResourceByDatePeriodResourcePathEnum;
  date: Date;
  period: string;
}

export interface GetActivitiesResourceByDateRangeRequest {
  resourcePath: GetActivitiesResourceByDateRangeResourcePathEnum;
  baseDate: Date;
  endDate: Date;
}

export interface GetActivitiesTrackerResourceByDatePeriodRequest {
  resourcePath: GetActivitiesTrackerResourceByDatePeriodResourcePathEnum;
  date: Date;
  period: string;
}

export interface GetActivitiesTrackerResourceByDateRangeRequest {
  resourcePath: GetActivitiesTrackerResourceByDateRangeResourcePathEnum;
  baseDate: Date;
  endDate: Date;
}

/**
 *
 */
export class ActivityTimeSeriesApi extends runtime.BaseAPI {
  /**
   * Returns time series data in the specified range for a given resource in the format requested using units in the unit system that corresponds to the Accept-Language header provided.
   * Get Activity Time Series
   */
  async getActivitiesResourceByDatePeriodRaw(
    requestParameters: GetActivitiesResourceByDatePeriodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.resourcePath === null ||
      requestParameters.resourcePath === undefined
    ) {
      throw new runtime.RequiredError(
        "resourcePath",
        "Required parameter requestParameters.resourcePath was null or undefined when calling getActivitiesResourceByDatePeriod.",
      );
    }

    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getActivitiesResourceByDatePeriod.",
      );
    }

    if (
      requestParameters.period === null ||
      requestParameters.period === undefined
    ) {
      throw new runtime.RequiredError(
        "period",
        "Required parameter requestParameters.period was null or undefined when calling getActivitiesResourceByDatePeriod.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/{resource-path}/date/{date}/{period}.json`
          .replace(
            `{${"resource-path"}}`,
            encodeURIComponent(String(requestParameters.resourcePath)),
          )
          .replace(
            `{${"date"}}`,
            encodeURIComponent(String(requestParameters.date)),
          )
          .replace(
            `{${"period"}}`,
            encodeURIComponent(String(requestParameters.period)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns time series data in the specified range for a given resource in the format requested using units in the unit system that corresponds to the Accept-Language header provided.
   * Get Activity Time Series
   */
  async getActivitiesResourceByDatePeriod(
    requestParameters: GetActivitiesResourceByDatePeriodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getActivitiesResourceByDatePeriodRaw(
      requestParameters,
      initOverrides,
    );
  }

  /**
   * Returns activities time series data in the specified range for a given resource.
   * Get Activity Resource by Date Range
   */
  async getActivitiesResourceByDateRangeRaw(
    requestParameters: GetActivitiesResourceByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.resourcePath === null ||
      requestParameters.resourcePath === undefined
    ) {
      throw new runtime.RequiredError(
        "resourcePath",
        "Required parameter requestParameters.resourcePath was null or undefined when calling getActivitiesResourceByDateRange.",
      );
    }

    if (
      requestParameters.baseDate === null ||
      requestParameters.baseDate === undefined
    ) {
      throw new runtime.RequiredError(
        "baseDate",
        "Required parameter requestParameters.baseDate was null or undefined when calling getActivitiesResourceByDateRange.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getActivitiesResourceByDateRange.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/{resource-path}/date/{base-date}/{end-date}.json`
          .replace(
            `{${"resource-path"}}`,
            encodeURIComponent(String(requestParameters.resourcePath)),
          )
          .replace(
            `{${"base-date"}}`,
            encodeURIComponent(String(requestParameters.baseDate)),
          )
          .replace(
            `{${"end-date"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns activities time series data in the specified range for a given resource.
   * Get Activity Resource by Date Range
   */
  async getActivitiesResourceByDateRange(
    requestParameters: GetActivitiesResourceByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getActivitiesResourceByDateRangeRaw(
      requestParameters,
      initOverrides,
    );
  }

  /**
   * Returns time series data in the specified range for a given resource in the format requested using units in the unit system that corresponds to the Accept-Language header provided.
   * Get Activity Time Series
   */
  async getActivitiesTrackerResourceByDatePeriodRaw(
    requestParameters: GetActivitiesTrackerResourceByDatePeriodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.resourcePath === null ||
      requestParameters.resourcePath === undefined
    ) {
      throw new runtime.RequiredError(
        "resourcePath",
        "Required parameter requestParameters.resourcePath was null or undefined when calling getActivitiesTrackerResourceByDatePeriod.",
      );
    }

    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getActivitiesTrackerResourceByDatePeriod.",
      );
    }

    if (
      requestParameters.period === null ||
      requestParameters.period === undefined
    ) {
      throw new runtime.RequiredError(
        "period",
        "Required parameter requestParameters.period was null or undefined when calling getActivitiesTrackerResourceByDatePeriod.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/tracker/{resource-path}/date/{date}/{period}.json`
          .replace(
            `{${"resource-path"}}`,
            encodeURIComponent(String(requestParameters.resourcePath)),
          )
          .replace(
            `{${"date"}}`,
            encodeURIComponent(String(requestParameters.date)),
          )
          .replace(
            `{${"period"}}`,
            encodeURIComponent(String(requestParameters.period)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns time series data in the specified range for a given resource in the format requested using units in the unit system that corresponds to the Accept-Language header provided.
   * Get Activity Time Series
   */
  async getActivitiesTrackerResourceByDatePeriod(
    requestParameters: GetActivitiesTrackerResourceByDatePeriodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getActivitiesTrackerResourceByDatePeriodRaw(
      requestParameters,
      initOverrides,
    );
  }

  /**
   * Returns time series data in the specified range for a given resource.
   * Get Activity Tracker Resource by Date Range Time Series
   */
  async getActivitiesTrackerResourceByDateRangeRaw(
    requestParameters: GetActivitiesTrackerResourceByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.resourcePath === null ||
      requestParameters.resourcePath === undefined
    ) {
      throw new runtime.RequiredError(
        "resourcePath",
        "Required parameter requestParameters.resourcePath was null or undefined when calling getActivitiesTrackerResourceByDateRange.",
      );
    }

    if (
      requestParameters.baseDate === null ||
      requestParameters.baseDate === undefined
    ) {
      throw new runtime.RequiredError(
        "baseDate",
        "Required parameter requestParameters.baseDate was null or undefined when calling getActivitiesTrackerResourceByDateRange.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getActivitiesTrackerResourceByDateRange.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/tracker/{resource-path}/date/{base-date}/{end-date}.json`
          .replace(
            `{${"resource-path"}}`,
            encodeURIComponent(String(requestParameters.resourcePath)),
          )
          .replace(
            `{${"base-date"}}`,
            encodeURIComponent(String(requestParameters.baseDate)),
          )
          .replace(
            `{${"end-date"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns time series data in the specified range for a given resource.
   * Get Activity Tracker Resource by Date Range Time Series
   */
  async getActivitiesTrackerResourceByDateRange(
    requestParameters: GetActivitiesTrackerResourceByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getActivitiesTrackerResourceByDateRangeRaw(
      requestParameters,
      initOverrides,
    );
  }
}

/**
 * @export
 */
export const GetActivitiesResourceByDatePeriodResourcePathEnum = {
  Calories: "calories",
  CaloriesBmr: "caloriesBMR",
  Steps: "steps",
  Distance: "distance",
  Floors: "floors",
  Elevation: "elevation",
  MinutesSedentary: "minutesSedentary",
  MinutesLightlyActive: "minutesLightlyActive",
  MinutesFairlyActive: "minutesFairlyActive",
  MinutesVeryActive: "minutesVeryActive",
  ActivityCalories: "activityCalories",
} as const;
export type GetActivitiesResourceByDatePeriodResourcePathEnum =
  (typeof GetActivitiesResourceByDatePeriodResourcePathEnum)[keyof typeof GetActivitiesResourceByDatePeriodResourcePathEnum];
/**
 * @export
 */
export const GetActivitiesResourceByDateRangeResourcePathEnum = {
  Calories: "calories",
  CaloriesBmr: "caloriesBMR",
  Steps: "steps",
  Distance: "distance",
  Floors: "floors",
  Elevation: "elevation",
  MinutesSedentary: "minutesSedentary",
  MinutesLightlyActive: "minutesLightlyActive",
  MinutesFairlyActive: "minutesFairlyActive",
  MinutesVeryActive: "minutesVeryActive",
  ActivityCalories: "activityCalories",
} as const;
export type GetActivitiesResourceByDateRangeResourcePathEnum =
  (typeof GetActivitiesResourceByDateRangeResourcePathEnum)[keyof typeof GetActivitiesResourceByDateRangeResourcePathEnum];
/**
 * @export
 */
export const GetActivitiesTrackerResourceByDatePeriodResourcePathEnum = {
  Calories: "calories",
  CaloriesBmr: "caloriesBMR",
  Steps: "steps",
  Distance: "distance",
  Floors: "floors",
  Elevation: "elevation",
  MinutesSedentary: "minutesSedentary",
  MinutesLightlyActive: "minutesLightlyActive",
  MinutesFairlyActive: "minutesFairlyActive",
  MinutesVeryActive: "minutesVeryActive",
  ActivityCalories: "activityCalories",
} as const;
export type GetActivitiesTrackerResourceByDatePeriodResourcePathEnum =
  (typeof GetActivitiesTrackerResourceByDatePeriodResourcePathEnum)[keyof typeof GetActivitiesTrackerResourceByDatePeriodResourcePathEnum];
/**
 * @export
 */
export const GetActivitiesTrackerResourceByDateRangeResourcePathEnum = {
  Calories: "calories",
  CaloriesBmr: "caloriesBMR",
  Steps: "steps",
  Distance: "distance",
  Floors: "floors",
  Elevation: "elevation",
  MinutesSedentary: "minutesSedentary",
  MinutesLightlyActive: "minutesLightlyActive",
  MinutesFairlyActive: "minutesFairlyActive",
  MinutesVeryActive: "minutesVeryActive",
  ActivityCalories: "activityCalories",
} as const;
export type GetActivitiesTrackerResourceByDateRangeResourcePathEnum =
  (typeof GetActivitiesTrackerResourceByDateRangeResourcePathEnum)[keyof typeof GetActivitiesTrackerResourceByDateRangeResourcePathEnum];
