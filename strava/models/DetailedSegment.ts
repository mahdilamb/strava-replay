/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { PolylineMap } from "./PolylineMap";
import {
  PolylineMapFromJSON,
  PolylineMapFromJSONTyped,
  PolylineMapToJSON,
} from "./PolylineMap";
import type { SummaryPRSegmentEffort } from "./SummaryPRSegmentEffort";
import {
  SummaryPRSegmentEffortFromJSON,
  SummaryPRSegmentEffortFromJSONTyped,
  SummaryPRSegmentEffortToJSON,
} from "./SummaryPRSegmentEffort";
import type { SummarySegmentEffort } from "./SummarySegmentEffort";
import {
  SummarySegmentEffortFromJSON,
  SummarySegmentEffortFromJSONTyped,
  SummarySegmentEffortToJSON,
} from "./SummarySegmentEffort";

/**
 *
 * @export
 * @interface DetailedSegment
 */
export interface DetailedSegment {
  /**
   * The unique identifier of this segment
   * @type {number}
   * @memberof DetailedSegment
   */
  id?: number;
  /**
   * The name of this segment
   * @type {string}
   * @memberof DetailedSegment
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof DetailedSegment
   */
  activityType?: DetailedSegmentActivityTypeEnum;
  /**
   * The segment's distance, in meters
   * @type {number}
   * @memberof DetailedSegment
   */
  distance?: number;
  /**
   * The segment's average grade, in percents
   * @type {number}
   * @memberof DetailedSegment
   */
  averageGrade?: number;
  /**
   * The segments's maximum grade, in percents
   * @type {number}
   * @memberof DetailedSegment
   */
  maximumGrade?: number;
  /**
   * The segments's highest elevation, in meters
   * @type {number}
   * @memberof DetailedSegment
   */
  elevationHigh?: number;
  /**
   * The segments's lowest elevation, in meters
   * @type {number}
   * @memberof DetailedSegment
   */
  elevationLow?: number;
  /**
   * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type {Array<number>}
   * @memberof DetailedSegment
   */
  startLatlng?: Array<number>;
  /**
   * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type {Array<number>}
   * @memberof DetailedSegment
   */
  endLatlng?: Array<number>;
  /**
   * The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category.
   * @type {number}
   * @memberof DetailedSegment
   */
  climbCategory?: number;
  /**
   * The segments's city.
   * @type {string}
   * @memberof DetailedSegment
   */
  city?: string;
  /**
   * The segments's state or geographical region.
   * @type {string}
   * @memberof DetailedSegment
   */
  state?: string;
  /**
   * The segment's country.
   * @type {string}
   * @memberof DetailedSegment
   */
  country?: string;
  /**
   * Whether this segment is private.
   * @type {boolean}
   * @memberof DetailedSegment
   */
  _private?: boolean;
  /**
   *
   * @type {SummaryPRSegmentEffort}
   * @memberof DetailedSegment
   */
  athletePrEffort?: SummaryPRSegmentEffort;
  /**
   *
   * @type {SummarySegmentEffort}
   * @memberof DetailedSegment
   */
  athleteSegmentStats?: SummarySegmentEffort;
  /**
   * The time at which the segment was created.
   * @type {Date}
   * @memberof DetailedSegment
   */
  createdAt?: Date;
  /**
   * The time at which the segment was last updated.
   * @type {Date}
   * @memberof DetailedSegment
   */
  updatedAt?: Date;
  /**
   * The segment's total elevation gain.
   * @type {number}
   * @memberof DetailedSegment
   */
  totalElevationGain?: number;
  /**
   *
   * @type {PolylineMap}
   * @memberof DetailedSegment
   */
  map?: PolylineMap;
  /**
   * The total number of efforts for this segment
   * @type {number}
   * @memberof DetailedSegment
   */
  effortCount?: number;
  /**
   * The number of unique athletes who have an effort for this segment
   * @type {number}
   * @memberof DetailedSegment
   */
  athleteCount?: number;
  /**
   * Whether this segment is considered hazardous
   * @type {boolean}
   * @memberof DetailedSegment
   */
  hazardous?: boolean;
  /**
   * The number of stars for this segment
   * @type {number}
   * @memberof DetailedSegment
   */
  starCount?: number;
}

/**
 * @export
 */
export const DetailedSegmentActivityTypeEnum = {
  Ride: "Ride",
  Run: "Run",
} as const;
export type DetailedSegmentActivityTypeEnum =
  (typeof DetailedSegmentActivityTypeEnum)[keyof typeof DetailedSegmentActivityTypeEnum];

/**
 * Check if a given object implements the DetailedSegment interface.
 */
export function instanceOfDetailedSegment(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function DetailedSegmentFromJSON(json: any): DetailedSegment {
  return DetailedSegmentFromJSONTyped(json, false);
}

export function DetailedSegmentFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): DetailedSegment {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, "id") ? undefined : json["id"],
    name: !exists(json, "name") ? undefined : json["name"],
    activityType: !exists(json, "activity_type")
      ? undefined
      : json["activity_type"],
    distance: !exists(json, "distance") ? undefined : json["distance"],
    averageGrade: !exists(json, "average_grade")
      ? undefined
      : json["average_grade"],
    maximumGrade: !exists(json, "maximum_grade")
      ? undefined
      : json["maximum_grade"],
    elevationHigh: !exists(json, "elevation_high")
      ? undefined
      : json["elevation_high"],
    elevationLow: !exists(json, "elevation_low")
      ? undefined
      : json["elevation_low"],
    startLatlng: !exists(json, "start_latlng")
      ? undefined
      : json["start_latlng"],
    endLatlng: !exists(json, "end_latlng") ? undefined : json["end_latlng"],
    climbCategory: !exists(json, "climb_category")
      ? undefined
      : json["climb_category"],
    city: !exists(json, "city") ? undefined : json["city"],
    state: !exists(json, "state") ? undefined : json["state"],
    country: !exists(json, "country") ? undefined : json["country"],
    _private: !exists(json, "private") ? undefined : json["private"],
    athletePrEffort: !exists(json, "athlete_pr_effort")
      ? undefined
      : SummaryPRSegmentEffortFromJSON(json["athlete_pr_effort"]),
    athleteSegmentStats: !exists(json, "athlete_segment_stats")
      ? undefined
      : SummarySegmentEffortFromJSON(json["athlete_segment_stats"]),
    createdAt: !exists(json, "created_at")
      ? undefined
      : new Date(json["created_at"]),
    updatedAt: !exists(json, "updated_at")
      ? undefined
      : new Date(json["updated_at"]),
    totalElevationGain: !exists(json, "total_elevation_gain")
      ? undefined
      : json["total_elevation_gain"],
    map: !exists(json, "map") ? undefined : PolylineMapFromJSON(json["map"]),
    effortCount: !exists(json, "effort_count")
      ? undefined
      : json["effort_count"],
    athleteCount: !exists(json, "athlete_count")
      ? undefined
      : json["athlete_count"],
    hazardous: !exists(json, "hazardous") ? undefined : json["hazardous"],
    starCount: !exists(json, "star_count") ? undefined : json["star_count"],
  };
}

export function DetailedSegmentToJSON(value?: DetailedSegment | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    activity_type: value.activityType,
    distance: value.distance,
    average_grade: value.averageGrade,
    maximum_grade: value.maximumGrade,
    elevation_high: value.elevationHigh,
    elevation_low: value.elevationLow,
    start_latlng: value.startLatlng,
    end_latlng: value.endLatlng,
    climb_category: value.climbCategory,
    city: value.city,
    state: value.state,
    country: value.country,
    private: value._private,
    athlete_pr_effort: SummaryPRSegmentEffortToJSON(value.athletePrEffort),
    athlete_segment_stats: SummarySegmentEffortToJSON(
      value.athleteSegmentStats,
    ),
    created_at:
      value.createdAt === undefined ? undefined : value.createdAt.toISOString(),
    updated_at:
      value.updatedAt === undefined ? undefined : value.updatedAt.toISOString(),
    total_elevation_gain: value.totalElevationGain,
    map: PolylineMapToJSON(value.map),
    effort_count: value.effortCount,
    athlete_count: value.athleteCount,
    hazardous: value.hazardous,
    star_count: value.starCount,
  };
}
