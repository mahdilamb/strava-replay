/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { ActivityTotal } from "./ActivityTotal";
import {
  ActivityTotalFromJSON,
  ActivityTotalFromJSONTyped,
  ActivityTotalToJSON,
  ActivityTotalToJSONTyped,
} from "./ActivityTotal";

/**
 * A set of rolled-up statistics and totals for an athlete
 * @export
 * @interface ActivityStats
 */
export interface ActivityStats {
  /**
   * The longest distance ridden by the athlete.
   * @type {number}
   * @memberof ActivityStats
   */
  biggestRideDistance?: number;
  /**
   * The highest climb ridden by the athlete.
   * @type {number}
   * @memberof ActivityStats
   */
  biggestClimbElevationGain?: number;
  /**
   *
   * @type {ActivityTotal}
   * @memberof ActivityStats
   */
  recentRideTotals?: ActivityTotal;
  /**
   *
   * @type {ActivityTotal}
   * @memberof ActivityStats
   */
  recentRunTotals?: ActivityTotal;
  /**
   *
   * @type {ActivityTotal}
   * @memberof ActivityStats
   */
  recentSwimTotals?: ActivityTotal;
  /**
   *
   * @type {ActivityTotal}
   * @memberof ActivityStats
   */
  ytdRideTotals?: ActivityTotal;
  /**
   *
   * @type {ActivityTotal}
   * @memberof ActivityStats
   */
  ytdRunTotals?: ActivityTotal;
  /**
   *
   * @type {ActivityTotal}
   * @memberof ActivityStats
   */
  ytdSwimTotals?: ActivityTotal;
  /**
   *
   * @type {ActivityTotal}
   * @memberof ActivityStats
   */
  allRideTotals?: ActivityTotal;
  /**
   *
   * @type {ActivityTotal}
   * @memberof ActivityStats
   */
  allRunTotals?: ActivityTotal;
  /**
   *
   * @type {ActivityTotal}
   * @memberof ActivityStats
   */
  allSwimTotals?: ActivityTotal;
}

/**
 * Check if a given object implements the ActivityStats interface.
 */
export function instanceOfActivityStats(value: object): value is ActivityStats {
  return true;
}

export function ActivityStatsFromJSON(json: any): ActivityStats {
  return ActivityStatsFromJSONTyped(json, false);
}

export function ActivityStatsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ActivityStats {
  if (json == null) {
    return json;
  }
  return {
    biggestRideDistance:
      json["biggest_ride_distance"] == null
        ? undefined
        : json["biggest_ride_distance"],
    biggestClimbElevationGain:
      json["biggest_climb_elevation_gain"] == null
        ? undefined
        : json["biggest_climb_elevation_gain"],
    recentRideTotals:
      json["recent_ride_totals"] == null
        ? undefined
        : ActivityTotalFromJSON(json["recent_ride_totals"]),
    recentRunTotals:
      json["recent_run_totals"] == null
        ? undefined
        : ActivityTotalFromJSON(json["recent_run_totals"]),
    recentSwimTotals:
      json["recent_swim_totals"] == null
        ? undefined
        : ActivityTotalFromJSON(json["recent_swim_totals"]),
    ytdRideTotals:
      json["ytd_ride_totals"] == null
        ? undefined
        : ActivityTotalFromJSON(json["ytd_ride_totals"]),
    ytdRunTotals:
      json["ytd_run_totals"] == null
        ? undefined
        : ActivityTotalFromJSON(json["ytd_run_totals"]),
    ytdSwimTotals:
      json["ytd_swim_totals"] == null
        ? undefined
        : ActivityTotalFromJSON(json["ytd_swim_totals"]),
    allRideTotals:
      json["all_ride_totals"] == null
        ? undefined
        : ActivityTotalFromJSON(json["all_ride_totals"]),
    allRunTotals:
      json["all_run_totals"] == null
        ? undefined
        : ActivityTotalFromJSON(json["all_run_totals"]),
    allSwimTotals:
      json["all_swim_totals"] == null
        ? undefined
        : ActivityTotalFromJSON(json["all_swim_totals"]),
  };
}

export function ActivityStatsToJSON(json: any): ActivityStats {
  return ActivityStatsToJSONTyped(json, false);
}

export function ActivityStatsToJSONTyped(
  value?: ActivityStats | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    biggest_ride_distance: value["biggestRideDistance"],
    biggest_climb_elevation_gain: value["biggestClimbElevationGain"],
    recent_ride_totals: ActivityTotalToJSON(value["recentRideTotals"]),
    recent_run_totals: ActivityTotalToJSON(value["recentRunTotals"]),
    recent_swim_totals: ActivityTotalToJSON(value["recentSwimTotals"]),
    ytd_ride_totals: ActivityTotalToJSON(value["ytdRideTotals"]),
    ytd_run_totals: ActivityTotalToJSON(value["ytdRunTotals"]),
    ytd_swim_totals: ActivityTotalToJSON(value["ytdSwimTotals"]),
    all_ride_totals: ActivityTotalToJSON(value["allRideTotals"]),
    all_run_totals: ActivityTotalToJSON(value["allRunTotals"]),
    all_swim_totals: ActivityTotalToJSON(value["allSwimTotals"]),
  };
}
