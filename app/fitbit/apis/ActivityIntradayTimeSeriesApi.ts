/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface GetActivitiesResourceByDateIntradayRequest {
  resourcePath: GetActivitiesResourceByDateIntradayResourcePathEnum;
  date: Date;
  detailLevel: string;
}

export interface GetActivitiesResourceByDateRangeIntradayRequest {
  resourcePath: GetActivitiesResourceByDateRangeIntradayResourcePathEnum;
  baseDate: Date;
  endDate: Date;
  detailLevel: string;
}

export interface GetActivitiesResourceByDateRangeTimeSeriesIntradayRequest {
  resourcePath: GetActivitiesResourceByDateRangeTimeSeriesIntradayResourcePathEnum;
  date: Date;
  endDate: Date;
  detailLevel: string;
  startTime: string;
  endTime: string;
}

export interface GetActivitiesResourceByDateTimeSeriesIntradayRequest {
  resourcePath: GetActivitiesResourceByDateTimeSeriesIntradayResourcePathEnum;
  date: Date;
  detailLevel: string;
  startTime: string;
  endTime: string;
}

/**
 *
 */
export class ActivityIntradayTimeSeriesApi extends runtime.BaseAPI {
  /**
   * Returns the Intraday Time Series for a given resource in the format requested.
   * Get Intraday Time Series
   */
  async getActivitiesResourceByDateIntradayRaw(
    requestParameters: GetActivitiesResourceByDateIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.resourcePath === null ||
      requestParameters.resourcePath === undefined
    ) {
      throw new runtime.RequiredError(
        "resourcePath",
        "Required parameter requestParameters.resourcePath was null or undefined when calling getActivitiesResourceByDateIntraday.",
      );
    }

    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getActivitiesResourceByDateIntraday.",
      );
    }

    if (
      requestParameters.detailLevel === null ||
      requestParameters.detailLevel === undefined
    ) {
      throw new runtime.RequiredError(
        "detailLevel",
        "Required parameter requestParameters.detailLevel was null or undefined when calling getActivitiesResourceByDateIntraday.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/{resource-path}/date/{date}/1d/{detail-level}.json`
          .replace(
            `{${"resource-path"}}`,
            encodeURIComponent(String(requestParameters.resourcePath)),
          )
          .replace(
            `{${"date"}}`,
            encodeURIComponent(String(requestParameters.date)),
          )
          .replace(
            `{${"detail-level"}}`,
            encodeURIComponent(String(requestParameters.detailLevel)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the Intraday Time Series for a given resource in the format requested.
   * Get Intraday Time Series
   */
  async getActivitiesResourceByDateIntraday(
    requestParameters: GetActivitiesResourceByDateIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getActivitiesResourceByDateIntradayRaw(
      requestParameters,
      initOverrides,
    );
  }

  /**
   * Returns the Activity Intraday Time Series for a given resource in the format requested.
   * Get Activity Intraday Time Series
   */
  async getActivitiesResourceByDateRangeIntradayRaw(
    requestParameters: GetActivitiesResourceByDateRangeIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.resourcePath === null ||
      requestParameters.resourcePath === undefined
    ) {
      throw new runtime.RequiredError(
        "resourcePath",
        "Required parameter requestParameters.resourcePath was null or undefined when calling getActivitiesResourceByDateRangeIntraday.",
      );
    }

    if (
      requestParameters.baseDate === null ||
      requestParameters.baseDate === undefined
    ) {
      throw new runtime.RequiredError(
        "baseDate",
        "Required parameter requestParameters.baseDate was null or undefined when calling getActivitiesResourceByDateRangeIntraday.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getActivitiesResourceByDateRangeIntraday.",
      );
    }

    if (
      requestParameters.detailLevel === null ||
      requestParameters.detailLevel === undefined
    ) {
      throw new runtime.RequiredError(
        "detailLevel",
        "Required parameter requestParameters.detailLevel was null or undefined when calling getActivitiesResourceByDateRangeIntraday.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/{resource-path}/date/{base-date}/{end-date}/{detail-level}.json`
          .replace(
            `{${"resource-path"}}`,
            encodeURIComponent(String(requestParameters.resourcePath)),
          )
          .replace(
            `{${"base-date"}}`,
            encodeURIComponent(String(requestParameters.baseDate)),
          )
          .replace(
            `{${"end-date"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          )
          .replace(
            `{${"detail-level"}}`,
            encodeURIComponent(String(requestParameters.detailLevel)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the Activity Intraday Time Series for a given resource in the format requested.
   * Get Activity Intraday Time Series
   */
  async getActivitiesResourceByDateRangeIntraday(
    requestParameters: GetActivitiesResourceByDateRangeIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getActivitiesResourceByDateRangeIntradayRaw(
      requestParameters,
      initOverrides,
    );
  }

  /**
   * Returns the Intraday Time Series for a given resource in the format requested.
   * Get Activity Intraday Time Series
   */
  async getActivitiesResourceByDateRangeTimeSeriesIntradayRaw(
    requestParameters: GetActivitiesResourceByDateRangeTimeSeriesIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.resourcePath === null ||
      requestParameters.resourcePath === undefined
    ) {
      throw new runtime.RequiredError(
        "resourcePath",
        "Required parameter requestParameters.resourcePath was null or undefined when calling getActivitiesResourceByDateRangeTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getActivitiesResourceByDateRangeTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getActivitiesResourceByDateRangeTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.detailLevel === null ||
      requestParameters.detailLevel === undefined
    ) {
      throw new runtime.RequiredError(
        "detailLevel",
        "Required parameter requestParameters.detailLevel was null or undefined when calling getActivitiesResourceByDateRangeTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.startTime === null ||
      requestParameters.startTime === undefined
    ) {
      throw new runtime.RequiredError(
        "startTime",
        "Required parameter requestParameters.startTime was null or undefined when calling getActivitiesResourceByDateRangeTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.endTime === null ||
      requestParameters.endTime === undefined
    ) {
      throw new runtime.RequiredError(
        "endTime",
        "Required parameter requestParameters.endTime was null or undefined when calling getActivitiesResourceByDateRangeTimeSeriesIntraday.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/{resource-path}/date/{date}/{end-date}/{detail-level}/time/{start-time}/{end-time}.json`
          .replace(
            `{${"resource-path"}}`,
            encodeURIComponent(String(requestParameters.resourcePath)),
          )
          .replace(
            `{${"date"}}`,
            encodeURIComponent(String(requestParameters.date)),
          )
          .replace(
            `{${"end-date"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          )
          .replace(
            `{${"detail-level"}}`,
            encodeURIComponent(String(requestParameters.detailLevel)),
          )
          .replace(
            `{${"start-time"}}`,
            encodeURIComponent(String(requestParameters.startTime)),
          )
          .replace(
            `{${"end-time"}}`,
            encodeURIComponent(String(requestParameters.endTime)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the Intraday Time Series for a given resource in the format requested.
   * Get Activity Intraday Time Series
   */
  async getActivitiesResourceByDateRangeTimeSeriesIntraday(
    requestParameters: GetActivitiesResourceByDateRangeTimeSeriesIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getActivitiesResourceByDateRangeTimeSeriesIntradayRaw(
      requestParameters,
      initOverrides,
    );
  }

  /**
   * Returns the Intraday Time Series for a given resource in the format requested.
   * Get Intraday Time Series
   */
  async getActivitiesResourceByDateTimeSeriesIntradayRaw(
    requestParameters: GetActivitiesResourceByDateTimeSeriesIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.resourcePath === null ||
      requestParameters.resourcePath === undefined
    ) {
      throw new runtime.RequiredError(
        "resourcePath",
        "Required parameter requestParameters.resourcePath was null or undefined when calling getActivitiesResourceByDateTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getActivitiesResourceByDateTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.detailLevel === null ||
      requestParameters.detailLevel === undefined
    ) {
      throw new runtime.RequiredError(
        "detailLevel",
        "Required parameter requestParameters.detailLevel was null or undefined when calling getActivitiesResourceByDateTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.startTime === null ||
      requestParameters.startTime === undefined
    ) {
      throw new runtime.RequiredError(
        "startTime",
        "Required parameter requestParameters.startTime was null or undefined when calling getActivitiesResourceByDateTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.endTime === null ||
      requestParameters.endTime === undefined
    ) {
      throw new runtime.RequiredError(
        "endTime",
        "Required parameter requestParameters.endTime was null or undefined when calling getActivitiesResourceByDateTimeSeriesIntraday.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/{resource-path}/date/{date}/1d/{detail-level}/time/{start-time}/{end-time}.json`
          .replace(
            `{${"resource-path"}}`,
            encodeURIComponent(String(requestParameters.resourcePath)),
          )
          .replace(
            `{${"date"}}`,
            encodeURIComponent(String(requestParameters.date)),
          )
          .replace(
            `{${"detail-level"}}`,
            encodeURIComponent(String(requestParameters.detailLevel)),
          )
          .replace(
            `{${"start-time"}}`,
            encodeURIComponent(String(requestParameters.startTime)),
          )
          .replace(
            `{${"end-time"}}`,
            encodeURIComponent(String(requestParameters.endTime)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the Intraday Time Series for a given resource in the format requested.
   * Get Intraday Time Series
   */
  async getActivitiesResourceByDateTimeSeriesIntraday(
    requestParameters: GetActivitiesResourceByDateTimeSeriesIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getActivitiesResourceByDateTimeSeriesIntradayRaw(
      requestParameters,
      initOverrides,
    );
  }
}

/**
 * @export
 */
export const GetActivitiesResourceByDateIntradayResourcePathEnum = {
  Calories: "calories",
  Steps: "steps",
  Distance: "distance",
  Floors: "floors",
  Elevation: "elevation",
} as const;
export type GetActivitiesResourceByDateIntradayResourcePathEnum =
  (typeof GetActivitiesResourceByDateIntradayResourcePathEnum)[keyof typeof GetActivitiesResourceByDateIntradayResourcePathEnum];
/**
 * @export
 */
export const GetActivitiesResourceByDateRangeIntradayResourcePathEnum = {
  Calories: "calories",
  Steps: "steps",
  Distance: "distance",
  Floors: "floors",
  Elevation: "elevation",
} as const;
export type GetActivitiesResourceByDateRangeIntradayResourcePathEnum =
  (typeof GetActivitiesResourceByDateRangeIntradayResourcePathEnum)[keyof typeof GetActivitiesResourceByDateRangeIntradayResourcePathEnum];
/**
 * @export
 */
export const GetActivitiesResourceByDateRangeTimeSeriesIntradayResourcePathEnum =
  {
    Calories: "calories",
    Steps: "steps",
    Distance: "distance",
    Floors: "floors",
    Elevation: "elevation",
  } as const;
export type GetActivitiesResourceByDateRangeTimeSeriesIntradayResourcePathEnum =
  (typeof GetActivitiesResourceByDateRangeTimeSeriesIntradayResourcePathEnum)[keyof typeof GetActivitiesResourceByDateRangeTimeSeriesIntradayResourcePathEnum];
/**
 * @export
 */
export const GetActivitiesResourceByDateTimeSeriesIntradayResourcePathEnum = {
  Calories: "calories",
  Steps: "steps",
  Distance: "distance",
  Floors: "floors",
  Elevation: "elevation",
} as const;
export type GetActivitiesResourceByDateTimeSeriesIntradayResourcePathEnum =
  (typeof GetActivitiesResourceByDateTimeSeriesIntradayResourcePathEnum)[keyof typeof GetActivitiesResourceByDateTimeSeriesIntradayResourcePathEnum];
