/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface IntrospectRequest {
  token: string;
}

export interface OauthTokenRequest {
  clientId: string;
  grantType: string;
  authorization?: string;
  code?: string;
  expiresIn?: string;
  redirectUri?: string;
  refreshToken?: string;
  state?: string;
}

export interface RevokeRequest {
  token: string;
}

/**
 *
 */
export class AuthorizationApi extends runtime.BaseAPI {
  /**
   * Retrieves the active state of an OAuth 2.0 token. It follows https://tools.ietf.org/html/rfc7662.
   * Retrieve the active state of an OAuth 2.0 token
   */
  async introspectRaw(
    requestParameters: IntrospectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.token === null ||
      requestParameters.token === undefined
    ) {
      throw new runtime.RequiredError(
        "token",
        "Required parameter requestParameters.token was null or undefined when calling introspect.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [],
      );
    }

    const consumes: runtime.Consume[] = [
      { contentType: "application/x-www-form-urlencoded" },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.token !== undefined) {
      formParams.append("token", requestParameters.token as any);
    }

    const response = await this.request(
      {
        path: `/1.1/oauth2/introspect`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retrieves the active state of an OAuth 2.0 token. It follows https://tools.ietf.org/html/rfc7662.
   * Retrieve the active state of an OAuth 2.0 token
   */
  async introspect(
    requestParameters: IntrospectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.introspectRaw(requestParameters, initOverrides);
  }

  /**
   * Retrieves an OAuth 2 access token.
   * Get OAuth 2 access token
   */
  async oauthTokenRaw(
    requestParameters: OauthTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.clientId === null ||
      requestParameters.clientId === undefined
    ) {
      throw new runtime.RequiredError(
        "clientId",
        "Required parameter requestParameters.clientId was null or undefined when calling oauthToken.",
      );
    }

    if (
      requestParameters.grantType === null ||
      requestParameters.grantType === undefined
    ) {
      throw new runtime.RequiredError(
        "grantType",
        "Required parameter requestParameters.grantType was null or undefined when calling oauthToken.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.code !== undefined) {
      queryParameters["code"] = requestParameters.code;
    }

    if (requestParameters.clientId !== undefined) {
      queryParameters["client_id"] = requestParameters.clientId;
    }

    if (requestParameters.expiresIn !== undefined) {
      queryParameters["expires_in"] = requestParameters.expiresIn;
    }

    if (requestParameters.grantType !== undefined) {
      queryParameters["grant_type"] = requestParameters.grantType;
    }

    if (requestParameters.redirectUri !== undefined) {
      queryParameters["redirect_uri"] = requestParameters.redirectUri;
    }

    if (requestParameters.refreshToken !== undefined) {
      queryParameters["refresh_token"] = requestParameters.refreshToken;
    }

    if (requestParameters.state !== undefined) {
      queryParameters["state"] = requestParameters.state;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.authorization !== undefined &&
      requestParameters.authorization !== null
    ) {
      headerParameters["Authorization"] = String(
        requestParameters.authorization,
      );
    }

    const response = await this.request(
      {
        path: `/oauth2/token`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retrieves an OAuth 2 access token.
   * Get OAuth 2 access token
   */
  async oauthToken(
    requestParameters: OauthTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.oauthTokenRaw(requestParameters, initOverrides);
  }

  /**
   * Revokes consent of the access token or refresh token
   * Revokes consent of the access token or refresh token
   */
  async revokeRaw(
    requestParameters: RevokeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.token === null ||
      requestParameters.token === undefined
    ) {
      throw new runtime.RequiredError(
        "token",
        "Required parameter requestParameters.token was null or undefined when calling revoke.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [],
      );
    }

    const consumes: runtime.Consume[] = [
      { contentType: "application/x-www-form-urlencoded" },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.token !== undefined) {
      formParams.append("token", requestParameters.token as any);
    }

    const response = await this.request(
      {
        path: `/oauth2/revoke`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Revokes consent of the access token or refresh token
   * Revokes consent of the access token or refresh token
   */
  async revoke(
    requestParameters: RevokeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.revokeRaw(requestParameters, initOverrides);
  }
}
