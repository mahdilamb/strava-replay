/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface GetEcgLogListRequest {
  sort: string;
  offset: number;
  limit: number;
  beforeDate?: Date;
  afterDate?: Date;
}

/**
 *
 */
export class ElectrocardiogramApi extends runtime.BaseAPI {
  /**
   * This endpoint is used for querying the user\'s on-device ECG readings.
   * Get ECG Log List
   */
  async getEcgLogListRaw(
    requestParameters: GetEcgLogListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.sort === null ||
      requestParameters.sort === undefined
    ) {
      throw new runtime.RequiredError(
        "sort",
        "Required parameter requestParameters.sort was null or undefined when calling getEcgLogList.",
      );
    }

    if (
      requestParameters.offset === null ||
      requestParameters.offset === undefined
    ) {
      throw new runtime.RequiredError(
        "offset",
        "Required parameter requestParameters.offset was null or undefined when calling getEcgLogList.",
      );
    }

    if (
      requestParameters.limit === null ||
      requestParameters.limit === undefined
    ) {
      throw new runtime.RequiredError(
        "limit",
        "Required parameter requestParameters.limit was null or undefined when calling getEcgLogList.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.beforeDate !== undefined) {
      queryParameters["beforeDate"] = (requestParameters.beforeDate as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters.afterDate !== undefined) {
      queryParameters["afterDate"] = (requestParameters.afterDate as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters.sort !== undefined) {
      queryParameters["sort"] = requestParameters.sort;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["electrocardiogram"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/ecg/list.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * This endpoint is used for querying the user\'s on-device ECG readings.
   * Get ECG Log List
   */
  async getEcgLogList(
    requestParameters: GetEcgLogListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getEcgLogListRaw(requestParameters, initOverrides);
  }
}
