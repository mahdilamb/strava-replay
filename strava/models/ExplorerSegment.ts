/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 *
 * @export
 * @interface ExplorerSegment
 */
export interface ExplorerSegment {
  /**
   * The unique identifier of this segment
   * @type {number}
   * @memberof ExplorerSegment
   */
  id?: number;
  /**
   * The name of this segment
   * @type {string}
   * @memberof ExplorerSegment
   */
  name?: string;
  /**
   * The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. If climb_category = 5, climb_category_desc = HC. If climb_category = 2, climb_category_desc = 3.
   * @type {number}
   * @memberof ExplorerSegment
   */
  climbCategory?: number;
  /**
   * The description for the category of the climb
   * @type {string}
   * @memberof ExplorerSegment
   */
  climbCategoryDesc?: ExplorerSegmentClimbCategoryDescEnum;
  /**
   * The segment's average grade, in percents
   * @type {number}
   * @memberof ExplorerSegment
   */
  avgGrade?: number;
  /**
   * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type {Array<number>}
   * @memberof ExplorerSegment
   */
  startLatlng?: Array<number>;
  /**
   * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type {Array<number>}
   * @memberof ExplorerSegment
   */
  endLatlng?: Array<number>;
  /**
   * The segments's evelation difference, in meters
   * @type {number}
   * @memberof ExplorerSegment
   */
  elevDifference?: number;
  /**
   * The segment's distance, in meters
   * @type {number}
   * @memberof ExplorerSegment
   */
  distance?: number;
  /**
   * The polyline of the segment
   * @type {string}
   * @memberof ExplorerSegment
   */
  points?: string;
}

/**
 * @export
 */
export const ExplorerSegmentClimbCategoryDescEnum = {
  Nc: "NC",
  _4: "4",
  _3: "3",
  _2: "2",
  _1: "1",
  Hc: "HC",
} as const;
export type ExplorerSegmentClimbCategoryDescEnum =
  (typeof ExplorerSegmentClimbCategoryDescEnum)[keyof typeof ExplorerSegmentClimbCategoryDescEnum];

/**
 * Check if a given object implements the ExplorerSegment interface.
 */
export function instanceOfExplorerSegment(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function ExplorerSegmentFromJSON(json: any): ExplorerSegment {
  return ExplorerSegmentFromJSONTyped(json, false);
}

export function ExplorerSegmentFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ExplorerSegment {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, "id") ? undefined : json["id"],
    name: !exists(json, "name") ? undefined : json["name"],
    climbCategory: !exists(json, "climb_category")
      ? undefined
      : json["climb_category"],
    climbCategoryDesc: !exists(json, "climb_category_desc")
      ? undefined
      : json["climb_category_desc"],
    avgGrade: !exists(json, "avg_grade") ? undefined : json["avg_grade"],
    startLatlng: !exists(json, "start_latlng")
      ? undefined
      : json["start_latlng"],
    endLatlng: !exists(json, "end_latlng") ? undefined : json["end_latlng"],
    elevDifference: !exists(json, "elev_difference")
      ? undefined
      : json["elev_difference"],
    distance: !exists(json, "distance") ? undefined : json["distance"],
    points: !exists(json, "points") ? undefined : json["points"],
  };
}

export function ExplorerSegmentToJSON(value?: ExplorerSegment | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    climb_category: value.climbCategory,
    climb_category_desc: value.climbCategoryDesc,
    avg_grade: value.avgGrade,
    start_latlng: value.startLatlng,
    end_latlng: value.endLatlng,
    elev_difference: value.elevDifference,
    distance: value.distance,
    points: value.points,
  };
}
