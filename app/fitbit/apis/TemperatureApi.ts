/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface GetTempCoreSummaryByDateRequest {
  date: Date;
}

export interface GetTempCoreSummaryByIntervalRequest {
  startDate: Date;
  endDate: Date;
}

export interface GetTempSkinSummaryByIntervalRequest {
  startDate: Date;
  endDate: Date;
}

export interface GetTempSkinSummaryDateRequest {
  date: Date;
}

/**
 *
 */
export class TemperatureApi extends runtime.BaseAPI {
  /**
   * Returns the Temperature (Core) data for a single date. Temperature (Core) data applies specifically to data logged manually by the user throughout the day.
   * Get Temperature (Core) Summary by Date
   */
  async getTempCoreSummaryByDateRaw(
    requestParameters: GetTempCoreSummaryByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getTempCoreSummaryByDate.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["temperature"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/temp/core/date/{date}.json`.replace(
          `{${"date"}}`,
          encodeURIComponent(String(requestParameters.date)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the Temperature (Core) data for a single date. Temperature (Core) data applies specifically to data logged manually by the user throughout the day.
   * Get Temperature (Core) Summary by Date
   */
  async getTempCoreSummaryByDate(
    requestParameters: GetTempCoreSummaryByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getTempCoreSummaryByDateRaw(requestParameters, initOverrides);
  }

  /**
   * Returns Temperature (Core) data for a date range. Temperature (Core) data applies specifically to data logged manually by the user throughout the day and the maximum date range cannot exceed 30 days.
   * Get Temperature (Core) Summary by Interval
   */
  async getTempCoreSummaryByIntervalRaw(
    requestParameters: GetTempCoreSummaryByIntervalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.startDate === null ||
      requestParameters.startDate === undefined
    ) {
      throw new runtime.RequiredError(
        "startDate",
        "Required parameter requestParameters.startDate was null or undefined when calling getTempCoreSummaryByInterval.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getTempCoreSummaryByInterval.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["temperature"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/temp/core/date/{startDate}/{endDate}.json`
          .replace(
            `{${"startDate"}}`,
            encodeURIComponent(String(requestParameters.startDate)),
          )
          .replace(
            `{${"endDate"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns Temperature (Core) data for a date range. Temperature (Core) data applies specifically to data logged manually by the user throughout the day and the maximum date range cannot exceed 30 days.
   * Get Temperature (Core) Summary by Interval
   */
  async getTempCoreSummaryByInterval(
    requestParameters: GetTempCoreSummaryByIntervalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getTempCoreSummaryByIntervalRaw(
      requestParameters,
      initOverrides,
    );
  }

  /**
   * Returns Temperature (Skin) data for a date range. It only returns a value for dates on which the Fitbit device was able to record Temperature (skin) data and the maximum date range cannot exceed 30 days.
   * Get Temperature (Skin) Summary by Interval
   */
  async getTempSkinSummaryByIntervalRaw(
    requestParameters: GetTempSkinSummaryByIntervalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.startDate === null ||
      requestParameters.startDate === undefined
    ) {
      throw new runtime.RequiredError(
        "startDate",
        "Required parameter requestParameters.startDate was null or undefined when calling getTempSkinSummaryByInterval.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getTempSkinSummaryByInterval.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["temperature"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/temp/skin/date/{startDate}/{endDate}.json`
          .replace(
            `{${"startDate"}}`,
            encodeURIComponent(String(requestParameters.startDate)),
          )
          .replace(
            `{${"endDate"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns Temperature (Skin) data for a date range. It only returns a value for dates on which the Fitbit device was able to record Temperature (skin) data and the maximum date range cannot exceed 30 days.
   * Get Temperature (Skin) Summary by Interval
   */
  async getTempSkinSummaryByInterval(
    requestParameters: GetTempSkinSummaryByIntervalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getTempSkinSummaryByIntervalRaw(
      requestParameters,
      initOverrides,
    );
  }

  /**
   * Returns the Temperature (Skin) data for a single date. Temperature (Skin) data applies specifically to a user’s “main sleep”, which is the longest single period of time asleep on a given date.
   * Get Temperature (Skin) Summary by Date
   */
  async getTempSkinSummaryDateRaw(
    requestParameters: GetTempSkinSummaryDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getTempSkinSummaryDate.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["temperature"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/temp/skin/date/{date}.json`.replace(
          `{${"date"}}`,
          encodeURIComponent(String(requestParameters.date)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the Temperature (Skin) data for a single date. Temperature (Skin) data applies specifically to a user’s “main sleep”, which is the longest single period of time asleep on a given date.
   * Get Temperature (Skin) Summary by Date
   */
  async getTempSkinSummaryDate(
    requestParameters: GetTempSkinSummaryDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getTempSkinSummaryDateRaw(requestParameters, initOverrides);
  }
}
