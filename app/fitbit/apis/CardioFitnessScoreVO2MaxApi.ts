/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface GetVo2MaxSummaryByDateRequest {
  date: Date;
}

export interface GetVo2MaxSummaryByIntervalRequest {
  startDate: Date;
  endDate: Date;
}

/**
 *
 */
export class CardioFitnessScoreVO2MaxApi extends runtime.BaseAPI {
  /**
   * This endpoint returns the Cardio Fitness Score (VO2 Max) data for a single date. VO2 Max values will be shown as a range if no run data is available or a single numeric value if the user uses a GPS for runs.
   * Get VO2 Max Summary by Date
   */
  async getVo2MaxSummaryByDateRaw(
    requestParameters: GetVo2MaxSummaryByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getVo2MaxSummaryByDate.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["cardio_fitness"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/cardioscore/date/{date}.json`.replace(
          `{${"date"}}`,
          encodeURIComponent(String(requestParameters.date)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * This endpoint returns the Cardio Fitness Score (VO2 Max) data for a single date. VO2 Max values will be shown as a range if no run data is available or a single numeric value if the user uses a GPS for runs.
   * Get VO2 Max Summary by Date
   */
  async getVo2MaxSummaryByDate(
    requestParameters: GetVo2MaxSummaryByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getVo2MaxSummaryByDateRaw(requestParameters, initOverrides);
  }

  /**
   * This endpoint returns the Cardio Fitness Score (VO2 Max) data for a date range. VO2 Max values will be shown as a range if no run data is available or a single numeric value if the user uses a GPS for runs.
   * Get VO2 Max Summary by Interval
   */
  async getVo2MaxSummaryByIntervalRaw(
    requestParameters: GetVo2MaxSummaryByIntervalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.startDate === null ||
      requestParameters.startDate === undefined
    ) {
      throw new runtime.RequiredError(
        "startDate",
        "Required parameter requestParameters.startDate was null or undefined when calling getVo2MaxSummaryByInterval.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getVo2MaxSummaryByInterval.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["cardio_fitness"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/cardioscore/date/{startDate}/{endDate}.json`
          .replace(
            `{${"startDate"}}`,
            encodeURIComponent(String(requestParameters.startDate)),
          )
          .replace(
            `{${"endDate"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * This endpoint returns the Cardio Fitness Score (VO2 Max) data for a date range. VO2 Max values will be shown as a range if no run data is available or a single numeric value if the user uses a GPS for runs.
   * Get VO2 Max Summary by Interval
   */
  async getVo2MaxSummaryByInterval(
    requestParameters: GetVo2MaxSummaryByIntervalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getVo2MaxSummaryByIntervalRaw(requestParameters, initOverrides);
  }
}
