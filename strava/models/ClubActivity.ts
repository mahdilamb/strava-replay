/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { MetaAthlete } from "./MetaAthlete";
import {
  MetaAthleteFromJSON,
  MetaAthleteFromJSONTyped,
  MetaAthleteToJSON,
  MetaAthleteToJSONTyped,
} from "./MetaAthlete";
import type { SportType } from "./SportType";
import {
  SportTypeFromJSON,
  SportTypeFromJSONTyped,
  SportTypeToJSON,
  SportTypeToJSONTyped,
} from "./SportType";
import type { ActivityType } from "./ActivityType";
import {
  ActivityTypeFromJSON,
  ActivityTypeFromJSONTyped,
  ActivityTypeToJSON,
  ActivityTypeToJSONTyped,
} from "./ActivityType";

/**
 *
 * @export
 * @interface ClubActivity
 */
export interface ClubActivity {
  /**
   *
   * @type {MetaAthlete}
   * @memberof ClubActivity
   */
  athlete?: MetaAthlete;
  /**
   * The name of the activity
   * @type {string}
   * @memberof ClubActivity
   */
  name?: string;
  /**
   * The activity's distance, in meters
   * @type {number}
   * @memberof ClubActivity
   */
  distance?: number;
  /**
   * The activity's moving time, in seconds
   * @type {number}
   * @memberof ClubActivity
   */
  movingTime?: number;
  /**
   * The activity's elapsed time, in seconds
   * @type {number}
   * @memberof ClubActivity
   */
  elapsedTime?: number;
  /**
   * The activity's total elevation gain.
   * @type {number}
   * @memberof ClubActivity
   */
  totalElevationGain?: number;
  /**
   *
   * @type {ActivityType}
   * @memberof ClubActivity
   */
  type?: ActivityType;
  /**
   *
   * @type {SportType}
   * @memberof ClubActivity
   */
  sportType?: SportType;
  /**
   * The activity's workout type
   * @type {number}
   * @memberof ClubActivity
   */
  workoutType?: number;
}

/**
 * Check if a given object implements the ClubActivity interface.
 */
export function instanceOfClubActivity(value: object): value is ClubActivity {
  return true;
}

export function ClubActivityFromJSON(json: any): ClubActivity {
  return ClubActivityFromJSONTyped(json, false);
}

export function ClubActivityFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ClubActivity {
  if (json == null) {
    return json;
  }
  return {
    athlete:
      json["athlete"] == null
        ? undefined
        : MetaAthleteFromJSON(json["athlete"]),
    name: json["name"] == null ? undefined : json["name"],
    distance: json["distance"] == null ? undefined : json["distance"],
    movingTime: json["moving_time"] == null ? undefined : json["moving_time"],
    elapsedTime:
      json["elapsed_time"] == null ? undefined : json["elapsed_time"],
    totalElevationGain:
      json["total_elevation_gain"] == null
        ? undefined
        : json["total_elevation_gain"],
    type: json["type"] == null ? undefined : ActivityTypeFromJSON(json["type"]),
    sportType:
      json["sport_type"] == null
        ? undefined
        : SportTypeFromJSON(json["sport_type"]),
    workoutType:
      json["workout_type"] == null ? undefined : json["workout_type"],
  };
}

export function ClubActivityToJSON(json: any): ClubActivity {
  return ClubActivityToJSONTyped(json, false);
}

export function ClubActivityToJSONTyped(
  value?: ClubActivity | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    athlete: MetaAthleteToJSON(value["athlete"]),
    name: value["name"],
    distance: value["distance"],
    moving_time: value["movingTime"],
    elapsed_time: value["elapsedTime"],
    total_elevation_gain: value["totalElevationGain"],
    type: ActivityTypeToJSON(value["type"]),
    sport_type: SportTypeToJSON(value["sportType"]),
    workout_type: value["workoutType"],
  };
}
