/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface AddActivitiesLogRequest {
  activityId: number;
  manualCalories: number;
  startTime: string;
  durationMillis: number;
  date: Date;
  distance: number;
  activityName?: string;
  distanceUnit?: number;
}

export interface AddFavoriteActivitiesRequest {
  activityId: string;
}

export interface AddUpdateActivitiesGoalsRequest {
  period: string;
  type: string;
  value: string;
}

export interface DeleteActivitiesLogRequest {
  activityLogId: number;
}

export interface DeleteFavoriteActivitiesRequest {
  activityId: string;
}

export interface GetActivitiesByDateRequest {
  date: Date;
}

export interface GetActivitiesGoalsRequest {
  period: string;
}

export interface GetActivitiesLogListRequest {
  sort: string;
  offset: number;
  limit: number;
  beforeDate?: Date;
  afterDate?: Date;
}

export interface GetActivitiesTCXRequest {
  logId: string;
  includePartialTCX?: boolean;
}

export interface GetActivitiesTypeDetailRequest {
  activityId: string;
}

/**
 *
 */
export class ActivityApi extends runtime.BaseAPI {
  /**
   * The Log Activity endpoint creates log entry for an activity or user\'s private custom activity using units in the unit system which corresponds to the Accept-Language header provided (or using optional custom distanceUnit) and get a response in the format requested.
   * Log Activity
   */
  async addActivitiesLogRaw(
    requestParameters: AddActivitiesLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.activityId === null ||
      requestParameters.activityId === undefined
    ) {
      throw new runtime.RequiredError(
        "activityId",
        "Required parameter requestParameters.activityId was null or undefined when calling addActivitiesLog.",
      );
    }

    if (
      requestParameters.manualCalories === null ||
      requestParameters.manualCalories === undefined
    ) {
      throw new runtime.RequiredError(
        "manualCalories",
        "Required parameter requestParameters.manualCalories was null or undefined when calling addActivitiesLog.",
      );
    }

    if (
      requestParameters.startTime === null ||
      requestParameters.startTime === undefined
    ) {
      throw new runtime.RequiredError(
        "startTime",
        "Required parameter requestParameters.startTime was null or undefined when calling addActivitiesLog.",
      );
    }

    if (
      requestParameters.durationMillis === null ||
      requestParameters.durationMillis === undefined
    ) {
      throw new runtime.RequiredError(
        "durationMillis",
        "Required parameter requestParameters.durationMillis was null or undefined when calling addActivitiesLog.",
      );
    }

    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling addActivitiesLog.",
      );
    }

    if (
      requestParameters.distance === null ||
      requestParameters.distance === undefined
    ) {
      throw new runtime.RequiredError(
        "distance",
        "Required parameter requestParameters.distance was null or undefined when calling addActivitiesLog.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.activityId !== undefined) {
      queryParameters["activityId"] = requestParameters.activityId;
    }

    if (requestParameters.activityName !== undefined) {
      queryParameters["activityName"] = requestParameters.activityName;
    }

    if (requestParameters.manualCalories !== undefined) {
      queryParameters["manualCalories"] = requestParameters.manualCalories;
    }

    if (requestParameters.startTime !== undefined) {
      queryParameters["startTime"] = requestParameters.startTime;
    }

    if (requestParameters.durationMillis !== undefined) {
      queryParameters["durationMillis"] = requestParameters.durationMillis;
    }

    if (requestParameters.date !== undefined) {
      queryParameters["date"] = (requestParameters.date as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters.distance !== undefined) {
      queryParameters["distance"] = requestParameters.distance;
    }

    if (requestParameters.distanceUnit !== undefined) {
      queryParameters["distanceUnit"] = requestParameters.distanceUnit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities.json`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * The Log Activity endpoint creates log entry for an activity or user\'s private custom activity using units in the unit system which corresponds to the Accept-Language header provided (or using optional custom distanceUnit) and get a response in the format requested.
   * Log Activity
   */
  async addActivitiesLog(
    requestParameters: AddActivitiesLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.addActivitiesLogRaw(requestParameters, initOverrides);
  }

  /**
   * Adds the activity with the given ID to user\'s list of favorite activities.
   * Add Favorite Activity
   */
  async addFavoriteActivitiesRaw(
    requestParameters: AddFavoriteActivitiesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.activityId === null ||
      requestParameters.activityId === undefined
    ) {
      throw new runtime.RequiredError(
        "activityId",
        "Required parameter requestParameters.activityId was null or undefined when calling addFavoriteActivities.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/favorite/{activity-id}.json`.replace(
          `{${"activity-id"}}`,
          encodeURIComponent(String(requestParameters.activityId)),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Adds the activity with the given ID to user\'s list of favorite activities.
   * Add Favorite Activity
   */
  async addFavoriteActivities(
    requestParameters: AddFavoriteActivitiesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.addFavoriteActivitiesRaw(requestParameters, initOverrides);
  }

  /**
   * Updates a user\'s daily or weekly activity goals and returns a response using units in the unit system which corresponds to the Accept-Language header provided.
   * Update Activity Goals
   */
  async addUpdateActivitiesGoalsRaw(
    requestParameters: AddUpdateActivitiesGoalsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.period === null ||
      requestParameters.period === undefined
    ) {
      throw new runtime.RequiredError(
        "period",
        "Required parameter requestParameters.period was null or undefined when calling addUpdateActivitiesGoals.",
      );
    }

    if (
      requestParameters.type === null ||
      requestParameters.type === undefined
    ) {
      throw new runtime.RequiredError(
        "type",
        "Required parameter requestParameters.type was null or undefined when calling addUpdateActivitiesGoals.",
      );
    }

    if (
      requestParameters.value === null ||
      requestParameters.value === undefined
    ) {
      throw new runtime.RequiredError(
        "value",
        "Required parameter requestParameters.value was null or undefined when calling addUpdateActivitiesGoals.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.type !== undefined) {
      queryParameters["type"] = requestParameters.type;
    }

    if (requestParameters.value !== undefined) {
      queryParameters["value"] = requestParameters.value;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/goals/{period}.json`.replace(
          `{${"period"}}`,
          encodeURIComponent(String(requestParameters.period)),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates a user\'s daily or weekly activity goals and returns a response using units in the unit system which corresponds to the Accept-Language header provided.
   * Update Activity Goals
   */
  async addUpdateActivitiesGoals(
    requestParameters: AddUpdateActivitiesGoalsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.addUpdateActivitiesGoalsRaw(requestParameters, initOverrides);
  }

  /**
   * Deletes a user\'s activity log entry with the given ID.
   * Delete Activity Log
   */
  async deleteActivitiesLogRaw(
    requestParameters: DeleteActivitiesLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.activityLogId === null ||
      requestParameters.activityLogId === undefined
    ) {
      throw new runtime.RequiredError(
        "activityLogId",
        "Required parameter requestParameters.activityLogId was null or undefined when calling deleteActivitiesLog.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/{activity-log-id}.json`.replace(
          `{${"activity-log-id"}}`,
          encodeURIComponent(String(requestParameters.activityLogId)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes a user\'s activity log entry with the given ID.
   * Delete Activity Log
   */
  async deleteActivitiesLog(
    requestParameters: DeleteActivitiesLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteActivitiesLogRaw(requestParameters, initOverrides);
  }

  /**
   * Removes the activity with the given ID from a user\'s list of favorite activities.
   * Delete Favorite Activity
   */
  async deleteFavoriteActivitiesRaw(
    requestParameters: DeleteFavoriteActivitiesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.activityId === null ||
      requestParameters.activityId === undefined
    ) {
      throw new runtime.RequiredError(
        "activityId",
        "Required parameter requestParameters.activityId was null or undefined when calling deleteFavoriteActivities.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/favorite/{activity-id}.json`.replace(
          `{${"activity-id"}}`,
          encodeURIComponent(String(requestParameters.activityId)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Removes the activity with the given ID from a user\'s list of favorite activities.
   * Delete Favorite Activity
   */
  async deleteFavoriteActivities(
    requestParameters: DeleteFavoriteActivitiesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteFavoriteActivitiesRaw(requestParameters, initOverrides);
  }

  /**
   * Retrieves a summary and list of a user\'s activities and activity log entries for a given day.
   * Get Activity Summary by Date
   */
  async getActivitiesByDateRaw(
    requestParameters: GetActivitiesByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getActivitiesByDate.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/date/{date}.json`.replace(
          `{${"date"}}`,
          encodeURIComponent(String(requestParameters.date)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retrieves a summary and list of a user\'s activities and activity log entries for a given day.
   * Get Activity Summary by Date
   */
  async getActivitiesByDate(
    requestParameters: GetActivitiesByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getActivitiesByDateRaw(requestParameters, initOverrides);
  }

  /**
   * Retreives a user\'s current daily or weekly activity goals using measurement units as defined in the unit system, which corresponds to the Accept-Language header provided.
   * Get Activity Goals
   */
  async getActivitiesGoalsRaw(
    requestParameters: GetActivitiesGoalsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.period === null ||
      requestParameters.period === undefined
    ) {
      throw new runtime.RequiredError(
        "period",
        "Required parameter requestParameters.period was null or undefined when calling getActivitiesGoals.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/goals/{period}.json`.replace(
          `{${"period"}}`,
          encodeURIComponent(String(requestParameters.period)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a user\'s current daily or weekly activity goals using measurement units as defined in the unit system, which corresponds to the Accept-Language header provided.
   * Get Activity Goals
   */
  async getActivitiesGoals(
    requestParameters: GetActivitiesGoalsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getActivitiesGoalsRaw(requestParameters, initOverrides);
  }

  /**
   * Updates a user\'s daily activity goals and returns a response using units in the unit system which corresponds to the Accept-Language header provided.
   * Get Lifetime Stats
   */
  async getActivitiesLogRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates a user\'s daily activity goals and returns a response using units in the unit system which corresponds to the Accept-Language header provided.
   * Get Lifetime Stats
   */
  async getActivitiesLog(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getActivitiesLogRaw(initOverrides);
  }

  /**
   * Retreives a list of user\'s activity log entries before or after a given day with offset and limit using units in the unit system which corresponds to the Accept-Language header provided.
   * Get Activity Log List
   */
  async getActivitiesLogListRaw(
    requestParameters: GetActivitiesLogListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.sort === null ||
      requestParameters.sort === undefined
    ) {
      throw new runtime.RequiredError(
        "sort",
        "Required parameter requestParameters.sort was null or undefined when calling getActivitiesLogList.",
      );
    }

    if (
      requestParameters.offset === null ||
      requestParameters.offset === undefined
    ) {
      throw new runtime.RequiredError(
        "offset",
        "Required parameter requestParameters.offset was null or undefined when calling getActivitiesLogList.",
      );
    }

    if (
      requestParameters.limit === null ||
      requestParameters.limit === undefined
    ) {
      throw new runtime.RequiredError(
        "limit",
        "Required parameter requestParameters.limit was null or undefined when calling getActivitiesLogList.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.beforeDate !== undefined) {
      queryParameters["beforeDate"] = (requestParameters.beforeDate as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters.afterDate !== undefined) {
      queryParameters["afterDate"] = (requestParameters.afterDate as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters.sort !== undefined) {
      queryParameters["sort"] = requestParameters.sort;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/list.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a list of user\'s activity log entries before or after a given day with offset and limit using units in the unit system which corresponds to the Accept-Language header provided.
   * Get Activity Log List
   */
  async getActivitiesLogList(
    requestParameters: GetActivitiesLogListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getActivitiesLogListRaw(requestParameters, initOverrides);
  }

  /**
   * Retreives the details of a user\'s location and heart rate data during a logged exercise activity.
   * Get Activity TCX
   */
  async getActivitiesTCXRaw(
    requestParameters: GetActivitiesTCXRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.logId === null ||
      requestParameters.logId === undefined
    ) {
      throw new runtime.RequiredError(
        "logId",
        "Required parameter requestParameters.logId was null or undefined when calling getActivitiesTCX.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.includePartialTCX !== undefined) {
      queryParameters["includePartialTCX"] =
        requestParameters.includePartialTCX;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/{log-id}.tcx`.replace(
          `{${"log-id"}}`,
          encodeURIComponent(String(requestParameters.logId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives the details of a user\'s location and heart rate data during a logged exercise activity.
   * Get Activity TCX
   */
  async getActivitiesTCX(
    requestParameters: GetActivitiesTCXRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getActivitiesTCXRaw(requestParameters, initOverrides);
  }

  /**
   * Returns the detail of a specific activity in the Fitbit activities database in the format requested. If activity has levels, it also returns a list of activity level details.
   * Get Activity Type
   */
  async getActivitiesTypeDetailRaw(
    requestParameters: GetActivitiesTypeDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.activityId === null ||
      requestParameters.activityId === undefined
    ) {
      throw new runtime.RequiredError(
        "activityId",
        "Required parameter requestParameters.activityId was null or undefined when calling getActivitiesTypeDetail.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/activities/{activity-id}.json`.replace(
          `{${"activity-id"}}`,
          encodeURIComponent(String(requestParameters.activityId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the detail of a specific activity in the Fitbit activities database in the format requested. If activity has levels, it also returns a list of activity level details.
   * Get Activity Type
   */
  async getActivitiesTypeDetail(
    requestParameters: GetActivitiesTypeDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getActivitiesTypeDetailRaw(requestParameters, initOverrides);
  }

  /**
   * Retreives a tree of all valid Fitbit public activities from the activities catelog as well as private custom activities the user created in the format requested.
   * Browse Activity Types
   */
  async getActivitiesTypesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/activities.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a tree of all valid Fitbit public activities from the activities catelog as well as private custom activities the user created in the format requested.
   * Browse Activity Types
   */
  async getActivitiesTypes(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getActivitiesTypesRaw(initOverrides);
  }

  /**
   * Returns a list of a user\'s favorite activities.
   * Get Favorite Activities
   */
  async getFavoriteActivitiesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/favorite.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns a list of a user\'s favorite activities.
   * Get Favorite Activities
   */
  async getFavoriteActivities(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getFavoriteActivitiesRaw(initOverrides);
  }

  /**
   * Retreives a list of a user\'s frequent activities in the format requested using units in the unit system which corresponds to the Accept-Language header provided.
   * Get Frequent Activities
   */
  async getFrequentActivitiesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/frequent.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a list of a user\'s frequent activities in the format requested using units in the unit system which corresponds to the Accept-Language header provided.
   * Get Frequent Activities
   */
  async getFrequentActivities(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getFrequentActivitiesRaw(initOverrides);
  }

  /**
   * Retreives a list of a user\'s recent activities types logged with some details of the last activity log of that type using units in the unit system which corresponds to the Accept-Language header provided.
   * Get Recent Activity Types
   */
  async getRecentActivitiesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/recent.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a list of a user\'s recent activities types logged with some details of the last activity log of that type using units in the unit system which corresponds to the Accept-Language header provided.
   * Get Recent Activity Types
   */
  async getRecentActivities(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getRecentActivitiesRaw(initOverrides);
  }
}
