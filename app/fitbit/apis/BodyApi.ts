/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface AddBodyFatLogRequest {
  fat: number;
  date: Date;
  time: string;
}

export interface AddWeightLogRequest {
  weight: number;
  date: Date;
  time?: string;
}

export interface DeleteBodyFatLogRequest {
  bodyFatLogId: number;
}

export interface DeleteWeightLogRequest {
  bodyWeightLogId: number;
}

export interface GetBodyFatByDateRequest {
  date: Date;
}

export interface GetBodyFatByDatePeriodRequest {
  date: Date;
  period: string;
}

export interface GetBodyFatByDateRangeRequest {
  baseDate: Date;
  endDate: Date;
}

export interface GetBodyGoalsRequest {
  goalType: string;
}

export interface GetWeightByDateRequest {
  date: Date;
}

export interface GetWeightByDatePeriodRequest {
  date: Date;
  period: string;
}

export interface GetWeightByDateRangeRequest {
  baseDate: Date;
  endDate: Date;
}

export interface UpdateBodyFatGoalRequest {
  fat: string;
}

export interface UpdateWeightGoalRequest {
  startDate: string;
  startWeight: string;
  weight?: string;
}

/**
 *
 */
export class BodyApi extends runtime.BaseAPI {
  /**
   * Creates a log entry for body fat and returns a response in the format requested.
   * Log Body Fat
   */
  async addBodyFatLogRaw(
    requestParameters: AddBodyFatLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.fat === null || requestParameters.fat === undefined) {
      throw new runtime.RequiredError(
        "fat",
        "Required parameter requestParameters.fat was null or undefined when calling addBodyFatLog.",
      );
    }

    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling addBodyFatLog.",
      );
    }

    if (
      requestParameters.time === null ||
      requestParameters.time === undefined
    ) {
      throw new runtime.RequiredError(
        "time",
        "Required parameter requestParameters.time was null or undefined when calling addBodyFatLog.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.fat !== undefined) {
      queryParameters["fat"] = requestParameters.fat;
    }

    if (requestParameters.date !== undefined) {
      queryParameters["date"] = (requestParameters.date as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters.time !== undefined) {
      queryParameters["time"] = requestParameters.time;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/body/log/fat.json`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Creates a log entry for body fat and returns a response in the format requested.
   * Log Body Fat
   */
  async addBodyFatLog(
    requestParameters: AddBodyFatLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.addBodyFatLogRaw(requestParameters, initOverrides);
  }

  /**
   * Creates log entry for a body weight using units in the unit systems that corresponds to the Accept-Language header provided and gets a response in the format requested.
   * Log Weight
   */
  async addWeightLogRaw(
    requestParameters: AddWeightLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.weight === null ||
      requestParameters.weight === undefined
    ) {
      throw new runtime.RequiredError(
        "weight",
        "Required parameter requestParameters.weight was null or undefined when calling addWeightLog.",
      );
    }

    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling addWeightLog.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.weight !== undefined) {
      queryParameters["weight"] = requestParameters.weight;
    }

    if (requestParameters.date !== undefined) {
      queryParameters["date"] = (requestParameters.date as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters.time !== undefined) {
      queryParameters["time"] = requestParameters.time;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/body/log/weight.json`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Creates log entry for a body weight using units in the unit systems that corresponds to the Accept-Language header provided and gets a response in the format requested.
   * Log Weight
   */
  async addWeightLog(
    requestParameters: AddWeightLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.addWeightLogRaw(requestParameters, initOverrides);
  }

  /**
   * Deletes a user\'s body fat log entry with the given ID.
   * Delete Body Fat Log
   */
  async deleteBodyFatLogRaw(
    requestParameters: DeleteBodyFatLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.bodyFatLogId === null ||
      requestParameters.bodyFatLogId === undefined
    ) {
      throw new runtime.RequiredError(
        "bodyFatLogId",
        "Required parameter requestParameters.bodyFatLogId was null or undefined when calling deleteBodyFatLog.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/body/log/fat/{body-fat-log-id}.json`.replace(
          `{${"body-fat-log-id"}}`,
          encodeURIComponent(String(requestParameters.bodyFatLogId)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes a user\'s body fat log entry with the given ID.
   * Delete Body Fat Log
   */
  async deleteBodyFatLog(
    requestParameters: DeleteBodyFatLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteBodyFatLogRaw(requestParameters, initOverrides);
  }

  /**
   * Deletes a user\'s body weight log entrywith the given ID.
   * Delete Weight Log
   */
  async deleteWeightLogRaw(
    requestParameters: DeleteWeightLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.bodyWeightLogId === null ||
      requestParameters.bodyWeightLogId === undefined
    ) {
      throw new runtime.RequiredError(
        "bodyWeightLogId",
        "Required parameter requestParameters.bodyWeightLogId was null or undefined when calling deleteWeightLog.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/body/log/weight/{body-weight-log-id}.json`.replace(
          `{${"body-weight-log-id"}}`,
          encodeURIComponent(String(requestParameters.bodyWeightLogId)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes a user\'s body weight log entrywith the given ID.
   * Delete Weight Log
   */
  async deleteWeightLog(
    requestParameters: DeleteWeightLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteWeightLogRaw(requestParameters, initOverrides);
  }

  /**
   * Retreives a list of all user\'s body fat log entries for a given day in the format requested.
   * Get Body Fat Logs
   */
  async getBodyFatByDateRaw(
    requestParameters: GetBodyFatByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getBodyFatByDate.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/body/log/fat/date/{date}.json`.replace(
          `{${"date"}}`,
          encodeURIComponent(String(requestParameters.date)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a list of all user\'s body fat log entries for a given day in the format requested.
   * Get Body Fat Logs
   */
  async getBodyFatByDate(
    requestParameters: GetBodyFatByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getBodyFatByDateRaw(requestParameters, initOverrides);
  }

  /**
   * Retreives a list of all user\'s body fat log entries for a given day in the format requested.
   * Get Body Fat Logs
   */
  async getBodyFatByDatePeriodRaw(
    requestParameters: GetBodyFatByDatePeriodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getBodyFatByDatePeriod.",
      );
    }

    if (
      requestParameters.period === null ||
      requestParameters.period === undefined
    ) {
      throw new runtime.RequiredError(
        "period",
        "Required parameter requestParameters.period was null or undefined when calling getBodyFatByDatePeriod.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/body/log/fat/date/{date}/{period}.json`
          .replace(
            `{${"date"}}`,
            encodeURIComponent(String(requestParameters.date)),
          )
          .replace(
            `{${"period"}}`,
            encodeURIComponent(String(requestParameters.period)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a list of all user\'s body fat log entries for a given day in the format requested.
   * Get Body Fat Logs
   */
  async getBodyFatByDatePeriod(
    requestParameters: GetBodyFatByDatePeriodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getBodyFatByDatePeriodRaw(requestParameters, initOverrides);
  }

  /**
   * Retreives a list of all user\'s body fat log entries for a given day in the format requested.
   * Get Body Fat Logs
   */
  async getBodyFatByDateRangeRaw(
    requestParameters: GetBodyFatByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.baseDate === null ||
      requestParameters.baseDate === undefined
    ) {
      throw new runtime.RequiredError(
        "baseDate",
        "Required parameter requestParameters.baseDate was null or undefined when calling getBodyFatByDateRange.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getBodyFatByDateRange.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/body/log/fat/date/{base-date}/{end-date}.json`
          .replace(
            `{${"base-date"}}`,
            encodeURIComponent(String(requestParameters.baseDate)),
          )
          .replace(
            `{${"end-date"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a list of all user\'s body fat log entries for a given day in the format requested.
   * Get Body Fat Logs
   */
  async getBodyFatByDateRange(
    requestParameters: GetBodyFatByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getBodyFatByDateRangeRaw(requestParameters, initOverrides);
  }

  /**
   * Retreives a user\'s current body fat percentage or weight goal using units in the unit systems that corresponds to the Accept-Language header providedin the format requested.
   * Get Body Goals
   */
  async getBodyGoalsRaw(
    requestParameters: GetBodyGoalsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.goalType === null ||
      requestParameters.goalType === undefined
    ) {
      throw new runtime.RequiredError(
        "goalType",
        "Required parameter requestParameters.goalType was null or undefined when calling getBodyGoals.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/body/log/{goal-type}/goal.json`.replace(
          `{${"goal-type"}}`,
          encodeURIComponent(String(requestParameters.goalType)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a user\'s current body fat percentage or weight goal using units in the unit systems that corresponds to the Accept-Language header providedin the format requested.
   * Get Body Goals
   */
  async getBodyGoals(
    requestParameters: GetBodyGoalsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getBodyGoalsRaw(requestParameters, initOverrides);
  }

  /**
   * Retreives a list of all user\'s body weight log entries for a given day using units in the unit systems which corresponds to the Accept-Language header provided.
   * Get Weight Logs
   */
  async getWeightByDateRaw(
    requestParameters: GetWeightByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getWeightByDate.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/body/log/weight/date/{date}.json`.replace(
          `{${"date"}}`,
          encodeURIComponent(String(requestParameters.date)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a list of all user\'s body weight log entries for a given day using units in the unit systems which corresponds to the Accept-Language header provided.
   * Get Weight Logs
   */
  async getWeightByDate(
    requestParameters: GetWeightByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getWeightByDateRaw(requestParameters, initOverrides);
  }

  /**
   * Retreives a list of all user\'s body weight log entries for a given day in the format requested.
   * Get Body Fat Logs
   */
  async getWeightByDatePeriodRaw(
    requestParameters: GetWeightByDatePeriodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getWeightByDatePeriod.",
      );
    }

    if (
      requestParameters.period === null ||
      requestParameters.period === undefined
    ) {
      throw new runtime.RequiredError(
        "period",
        "Required parameter requestParameters.period was null or undefined when calling getWeightByDatePeriod.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/body/log/weight/date/{date}/{period}.json`
          .replace(
            `{${"date"}}`,
            encodeURIComponent(String(requestParameters.date)),
          )
          .replace(
            `{${"period"}}`,
            encodeURIComponent(String(requestParameters.period)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a list of all user\'s body weight log entries for a given day in the format requested.
   * Get Body Fat Logs
   */
  async getWeightByDatePeriod(
    requestParameters: GetWeightByDatePeriodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getWeightByDatePeriodRaw(requestParameters, initOverrides);
  }

  /**
   * Retreives a list of all user\'s body fat log entries for a given day in the format requested.
   * Get Body Fat Logs
   */
  async getWeightByDateRangeRaw(
    requestParameters: GetWeightByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.baseDate === null ||
      requestParameters.baseDate === undefined
    ) {
      throw new runtime.RequiredError(
        "baseDate",
        "Required parameter requestParameters.baseDate was null or undefined when calling getWeightByDateRange.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getWeightByDateRange.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/body/log/weight/date/{base-date}/{end-date}.json`
          .replace(
            `{${"base-date"}}`,
            encodeURIComponent(String(requestParameters.baseDate)),
          )
          .replace(
            `{${"end-date"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a list of all user\'s body fat log entries for a given day in the format requested.
   * Get Body Fat Logs
   */
  async getWeightByDateRange(
    requestParameters: GetWeightByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getWeightByDateRangeRaw(requestParameters, initOverrides);
  }

  /**
   * Updates user\'s fat percentage goal.
   * Update Body Fat Goal
   */
  async updateBodyFatGoalRaw(
    requestParameters: UpdateBodyFatGoalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.fat === null || requestParameters.fat === undefined) {
      throw new runtime.RequiredError(
        "fat",
        "Required parameter requestParameters.fat was null or undefined when calling updateBodyFatGoal.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.fat !== undefined) {
      queryParameters["fat"] = requestParameters.fat;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/body/log/fat/goal.json`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates user\'s fat percentage goal.
   * Update Body Fat Goal
   */
  async updateBodyFatGoal(
    requestParameters: UpdateBodyFatGoalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.updateBodyFatGoalRaw(requestParameters, initOverrides);
  }

  /**
   * Updates user\'s fat percentage goal.
   * Update Weight Goal
   */
  async updateWeightGoalRaw(
    requestParameters: UpdateWeightGoalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.startDate === null ||
      requestParameters.startDate === undefined
    ) {
      throw new runtime.RequiredError(
        "startDate",
        "Required parameter requestParameters.startDate was null or undefined when calling updateWeightGoal.",
      );
    }

    if (
      requestParameters.startWeight === null ||
      requestParameters.startWeight === undefined
    ) {
      throw new runtime.RequiredError(
        "startWeight",
        "Required parameter requestParameters.startWeight was null or undefined when calling updateWeightGoal.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.startDate !== undefined) {
      queryParameters["startDate"] = requestParameters.startDate;
    }

    if (requestParameters.startWeight !== undefined) {
      queryParameters["startWeight"] = requestParameters.startWeight;
    }

    if (requestParameters.weight !== undefined) {
      queryParameters["weight"] = requestParameters.weight;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["profile", "heartrate", "location"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/body/log/weight/goal.json`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates user\'s fat percentage goal.
   * Update Weight Goal
   */
  async updateWeightGoal(
    requestParameters: UpdateWeightGoalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.updateWeightGoalRaw(requestParameters, initOverrides);
  }
}
