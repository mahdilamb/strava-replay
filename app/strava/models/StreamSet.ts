/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { AltitudeStream } from "./AltitudeStream";
import {
  AltitudeStreamFromJSON,
  AltitudeStreamFromJSONTyped,
  AltitudeStreamToJSON,
} from "./AltitudeStream";
import type { CadenceStream } from "./CadenceStream";
import {
  CadenceStreamFromJSON,
  CadenceStreamFromJSONTyped,
  CadenceStreamToJSON,
} from "./CadenceStream";
import type { DistanceStream } from "./DistanceStream";
import {
  DistanceStreamFromJSON,
  DistanceStreamFromJSONTyped,
  DistanceStreamToJSON,
} from "./DistanceStream";
import type { HeartrateStream } from "./HeartrateStream";
import {
  HeartrateStreamFromJSON,
  HeartrateStreamFromJSONTyped,
  HeartrateStreamToJSON,
} from "./HeartrateStream";
import type { LatLngStream } from "./LatLngStream";
import {
  LatLngStreamFromJSON,
  LatLngStreamFromJSONTyped,
  LatLngStreamToJSON,
} from "./LatLngStream";
import type { MovingStream } from "./MovingStream";
import {
  MovingStreamFromJSON,
  MovingStreamFromJSONTyped,
  MovingStreamToJSON,
} from "./MovingStream";
import type { PowerStream } from "./PowerStream";
import {
  PowerStreamFromJSON,
  PowerStreamFromJSONTyped,
  PowerStreamToJSON,
} from "./PowerStream";
import type { SmoothGradeStream } from "./SmoothGradeStream";
import {
  SmoothGradeStreamFromJSON,
  SmoothGradeStreamFromJSONTyped,
  SmoothGradeStreamToJSON,
} from "./SmoothGradeStream";
import type { SmoothVelocityStream } from "./SmoothVelocityStream";
import {
  SmoothVelocityStreamFromJSON,
  SmoothVelocityStreamFromJSONTyped,
  SmoothVelocityStreamToJSON,
} from "./SmoothVelocityStream";
import type { TemperatureStream } from "./TemperatureStream";
import {
  TemperatureStreamFromJSON,
  TemperatureStreamFromJSONTyped,
  TemperatureStreamToJSON,
} from "./TemperatureStream";
import type { TimeStream } from "./TimeStream";
import {
  TimeStreamFromJSON,
  TimeStreamFromJSONTyped,
  TimeStreamToJSON,
} from "./TimeStream";

/**
 *
 * @export
 * @interface StreamSet
 */
export interface StreamSet {
  /**
   *
   * @type {TimeStream}
   * @memberof StreamSet
   */
  time?: TimeStream;
  /**
   *
   * @type {DistanceStream}
   * @memberof StreamSet
   */
  distance?: DistanceStream;
  /**
   *
   * @type {LatLngStream}
   * @memberof StreamSet
   */
  latlng?: LatLngStream;
  /**
   *
   * @type {AltitudeStream}
   * @memberof StreamSet
   */
  altitude?: AltitudeStream;
  /**
   *
   * @type {SmoothVelocityStream}
   * @memberof StreamSet
   */
  velocitySmooth?: SmoothVelocityStream;
  /**
   *
   * @type {HeartrateStream}
   * @memberof StreamSet
   */
  heartrate?: HeartrateStream;
  /**
   *
   * @type {CadenceStream}
   * @memberof StreamSet
   */
  cadence?: CadenceStream;
  /**
   *
   * @type {PowerStream}
   * @memberof StreamSet
   */
  watts?: PowerStream;
  /**
   *
   * @type {TemperatureStream}
   * @memberof StreamSet
   */
  temp?: TemperatureStream;
  /**
   *
   * @type {MovingStream}
   * @memberof StreamSet
   */
  moving?: MovingStream;
  /**
   *
   * @type {SmoothGradeStream}
   * @memberof StreamSet
   */
  gradeSmooth?: SmoothGradeStream;
}

/**
 * Check if a given object implements the StreamSet interface.
 */
export function instanceOfStreamSet(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function StreamSetFromJSON(json: any): StreamSet {
  return StreamSetFromJSONTyped(json, false);
}

export function StreamSetFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): StreamSet {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    time: !exists(json, "time") ? undefined : TimeStreamFromJSON(json["time"]),
    distance: !exists(json, "distance")
      ? undefined
      : DistanceStreamFromJSON(json["distance"]),
    latlng: !exists(json, "latlng")
      ? undefined
      : LatLngStreamFromJSON(json["latlng"]),
    altitude: !exists(json, "altitude")
      ? undefined
      : AltitudeStreamFromJSON(json["altitude"]),
    velocitySmooth: !exists(json, "velocity_smooth")
      ? undefined
      : SmoothVelocityStreamFromJSON(json["velocity_smooth"]),
    heartrate: !exists(json, "heartrate")
      ? undefined
      : HeartrateStreamFromJSON(json["heartrate"]),
    cadence: !exists(json, "cadence")
      ? undefined
      : CadenceStreamFromJSON(json["cadence"]),
    watts: !exists(json, "watts")
      ? undefined
      : PowerStreamFromJSON(json["watts"]),
    temp: !exists(json, "temp")
      ? undefined
      : TemperatureStreamFromJSON(json["temp"]),
    moving: !exists(json, "moving")
      ? undefined
      : MovingStreamFromJSON(json["moving"]),
    gradeSmooth: !exists(json, "grade_smooth")
      ? undefined
      : SmoothGradeStreamFromJSON(json["grade_smooth"]),
  };
}

export function StreamSetToJSON(value?: StreamSet | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    time: TimeStreamToJSON(value.time),
    distance: DistanceStreamToJSON(value.distance),
    latlng: LatLngStreamToJSON(value.latlng),
    altitude: AltitudeStreamToJSON(value.altitude),
    velocity_smooth: SmoothVelocityStreamToJSON(value.velocitySmooth),
    heartrate: HeartrateStreamToJSON(value.heartrate),
    cadence: CadenceStreamToJSON(value.cadence),
    watts: PowerStreamToJSON(value.watts),
    temp: TemperatureStreamToJSON(value.temp),
    moving: MovingStreamToJSON(value.moving),
    grade_smooth: SmoothGradeStreamToJSON(value.gradeSmooth),
  };
}
