/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 * A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
 * @export
 * @interface ActivityTotal
 */
export interface ActivityTotal {
  /**
   * The number of activities considered in this total.
   * @type {number}
   * @memberof ActivityTotal
   */
  count?: number;
  /**
   * The total distance covered by the considered activities.
   * @type {number}
   * @memberof ActivityTotal
   */
  distance?: number;
  /**
   * The total moving time of the considered activities.
   * @type {number}
   * @memberof ActivityTotal
   */
  movingTime?: number;
  /**
   * The total elapsed time of the considered activities.
   * @type {number}
   * @memberof ActivityTotal
   */
  elapsedTime?: number;
  /**
   * The total elevation gain of the considered activities.
   * @type {number}
   * @memberof ActivityTotal
   */
  elevationGain?: number;
  /**
   * The total number of achievements of the considered activities.
   * @type {number}
   * @memberof ActivityTotal
   */
  achievementCount?: number;
}

/**
 * Check if a given object implements the ActivityTotal interface.
 */
export function instanceOfActivityTotal(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function ActivityTotalFromJSON(json: any): ActivityTotal {
  return ActivityTotalFromJSONTyped(json, false);
}

export function ActivityTotalFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ActivityTotal {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    count: !exists(json, "count") ? undefined : json["count"],
    distance: !exists(json, "distance") ? undefined : json["distance"],
    movingTime: !exists(json, "moving_time") ? undefined : json["moving_time"],
    elapsedTime: !exists(json, "elapsed_time")
      ? undefined
      : json["elapsed_time"],
    elevationGain: !exists(json, "elevation_gain")
      ? undefined
      : json["elevation_gain"],
    achievementCount: !exists(json, "achievement_count")
      ? undefined
      : json["achievement_count"],
  };
}

export function ActivityTotalToJSON(value?: ActivityTotal | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    count: value.count,
    distance: value.distance,
    moving_time: value.movingTime,
    elapsed_time: value.elapsedTime,
    elevation_gain: value.elevationGain,
    achievement_count: value.achievementCount,
  };
}
