/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface GetAZMByDateIntradayRequest {
  date: Date;
  detailLevel: GetAZMByDateIntradayDetailLevelEnum;
}

export interface GetAZMByDateTimeSeriesIntradayRequest {
  date: Date;
  detailLevel: GetAZMByDateTimeSeriesIntradayDetailLevelEnum;
  startTime: string;
  endTime: string;
}

export interface GetAZMByIntervalIntradayRequest {
  startDate: Date;
  endDate: Date;
  detailLevel: GetAZMByIntervalIntradayDetailLevelEnum;
}

export interface GetAZMByIntervalTimeSeriesIntradayRequest {
  startDate: Date;
  endDate: Date;
  detailLevel: GetAZMByIntervalTimeSeriesIntradayDetailLevelEnum;
  startTime: string;
  endTime: string;
}

/**
 *
 */
export class ActiveZoneMinutesIntradayTimeSeriesApi extends runtime.BaseAPI {
  /**
   * Returns the active zone minutes intraday data for a 24 hour period by specifying a date and/or time range.
   * Get AZM Intraday by Date
   */
  async getAZMByDateIntradayRaw(
    requestParameters: GetAZMByDateIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getAZMByDateIntraday.",
      );
    }

    if (
      requestParameters.detailLevel === null ||
      requestParameters.detailLevel === undefined
    ) {
      throw new runtime.RequiredError(
        "detailLevel",
        "Required parameter requestParameters.detailLevel was null or undefined when calling getAZMByDateIntraday.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["activity"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/active-zone-minutes/date/{date}/1d/{detail-level}.json`
          .replace(
            `{${"date"}}`,
            encodeURIComponent(String(requestParameters.date)),
          )
          .replace(
            `{${"detail-level"}}`,
            encodeURIComponent(String(requestParameters.detailLevel)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the active zone minutes intraday data for a 24 hour period by specifying a date and/or time range.
   * Get AZM Intraday by Date
   */
  async getAZMByDateIntraday(
    requestParameters: GetAZMByDateIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getAZMByDateIntradayRaw(requestParameters, initOverrides);
  }

  /**
   * Returns the active zone minutes intraday data for a 24 hour period by specifying a date and/or time range.
   * Get AZM Intraday by Date
   */
  async getAZMByDateTimeSeriesIntradayRaw(
    requestParameters: GetAZMByDateTimeSeriesIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getAZMByDateTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.detailLevel === null ||
      requestParameters.detailLevel === undefined
    ) {
      throw new runtime.RequiredError(
        "detailLevel",
        "Required parameter requestParameters.detailLevel was null or undefined when calling getAZMByDateTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.startTime === null ||
      requestParameters.startTime === undefined
    ) {
      throw new runtime.RequiredError(
        "startTime",
        "Required parameter requestParameters.startTime was null or undefined when calling getAZMByDateTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.endTime === null ||
      requestParameters.endTime === undefined
    ) {
      throw new runtime.RequiredError(
        "endTime",
        "Required parameter requestParameters.endTime was null or undefined when calling getAZMByDateTimeSeriesIntraday.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["activity"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/active-zone-minutes/date/{date}/1d/{detail-level}/time/{start-time}/{end-time}.json`
          .replace(
            `{${"date"}}`,
            encodeURIComponent(String(requestParameters.date)),
          )
          .replace(
            `{${"detail-level"}}`,
            encodeURIComponent(String(requestParameters.detailLevel)),
          )
          .replace(
            `{${"start-time"}}`,
            encodeURIComponent(String(requestParameters.startTime)),
          )
          .replace(
            `{${"end-time"}}`,
            encodeURIComponent(String(requestParameters.endTime)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the active zone minutes intraday data for a 24 hour period by specifying a date and/or time range.
   * Get AZM Intraday by Date
   */
  async getAZMByDateTimeSeriesIntraday(
    requestParameters: GetAZMByDateTimeSeriesIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getAZMByDateTimeSeriesIntradayRaw(
      requestParameters,
      initOverrides,
    );
  }

  /**
   * Returns the active zone minutes intraday data for a 24 hour period by specifying a date range and/or time range.
   * Get AZM Intraday by Interval
   */
  async getAZMByIntervalIntradayRaw(
    requestParameters: GetAZMByIntervalIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.startDate === null ||
      requestParameters.startDate === undefined
    ) {
      throw new runtime.RequiredError(
        "startDate",
        "Required parameter requestParameters.startDate was null or undefined when calling getAZMByIntervalIntraday.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getAZMByIntervalIntraday.",
      );
    }

    if (
      requestParameters.detailLevel === null ||
      requestParameters.detailLevel === undefined
    ) {
      throw new runtime.RequiredError(
        "detailLevel",
        "Required parameter requestParameters.detailLevel was null or undefined when calling getAZMByIntervalIntraday.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["activity"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/active-zone-minutes/date/{start-date}/{end-date}/{detail-level}.json`
          .replace(
            `{${"start-date"}}`,
            encodeURIComponent(String(requestParameters.startDate)),
          )
          .replace(
            `{${"end-date"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          )
          .replace(
            `{${"detail-level"}}`,
            encodeURIComponent(String(requestParameters.detailLevel)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the active zone minutes intraday data for a 24 hour period by specifying a date range and/or time range.
   * Get AZM Intraday by Interval
   */
  async getAZMByIntervalIntraday(
    requestParameters: GetAZMByIntervalIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getAZMByIntervalIntradayRaw(requestParameters, initOverrides);
  }

  /**
   * Returns the active zone minutes intraday data for a 24 hour period by specifying a date range and/or time range.
   * Get AZM Intraday by Interval
   */
  async getAZMByIntervalTimeSeriesIntradayRaw(
    requestParameters: GetAZMByIntervalTimeSeriesIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.startDate === null ||
      requestParameters.startDate === undefined
    ) {
      throw new runtime.RequiredError(
        "startDate",
        "Required parameter requestParameters.startDate was null or undefined when calling getAZMByIntervalTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getAZMByIntervalTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.detailLevel === null ||
      requestParameters.detailLevel === undefined
    ) {
      throw new runtime.RequiredError(
        "detailLevel",
        "Required parameter requestParameters.detailLevel was null or undefined when calling getAZMByIntervalTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.startTime === null ||
      requestParameters.startTime === undefined
    ) {
      throw new runtime.RequiredError(
        "startTime",
        "Required parameter requestParameters.startTime was null or undefined when calling getAZMByIntervalTimeSeriesIntraday.",
      );
    }

    if (
      requestParameters.endTime === null ||
      requestParameters.endTime === undefined
    ) {
      throw new runtime.RequiredError(
        "endTime",
        "Required parameter requestParameters.endTime was null or undefined when calling getAZMByIntervalTimeSeriesIntraday.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["activity"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/active-zone-minutes/date/{start-date}/{end-date}/time/{start-time}/{end-time}.json`
          .replace(
            `{${"start-date"}}`,
            encodeURIComponent(String(requestParameters.startDate)),
          )
          .replace(
            `{${"end-date"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          )
          .replace(
            `{${"detail-level"}}`,
            encodeURIComponent(String(requestParameters.detailLevel)),
          )
          .replace(
            `{${"start-time"}}`,
            encodeURIComponent(String(requestParameters.startTime)),
          )
          .replace(
            `{${"end-time"}}`,
            encodeURIComponent(String(requestParameters.endTime)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the active zone minutes intraday data for a 24 hour period by specifying a date range and/or time range.
   * Get AZM Intraday by Interval
   */
  async getAZMByIntervalTimeSeriesIntraday(
    requestParameters: GetAZMByIntervalTimeSeriesIntradayRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getAZMByIntervalTimeSeriesIntradayRaw(
      requestParameters,
      initOverrides,
    );
  }
}

/**
 * @export
 */
export const GetAZMByDateIntradayDetailLevelEnum = {
  _1min: "1min",
  _5min: "5min",
  _15min: "15min",
} as const;
export type GetAZMByDateIntradayDetailLevelEnum =
  (typeof GetAZMByDateIntradayDetailLevelEnum)[keyof typeof GetAZMByDateIntradayDetailLevelEnum];
/**
 * @export
 */
export const GetAZMByDateTimeSeriesIntradayDetailLevelEnum = {
  _1min: "1min",
  _5min: "5min",
  _15min: "15min",
} as const;
export type GetAZMByDateTimeSeriesIntradayDetailLevelEnum =
  (typeof GetAZMByDateTimeSeriesIntradayDetailLevelEnum)[keyof typeof GetAZMByDateTimeSeriesIntradayDetailLevelEnum];
/**
 * @export
 */
export const GetAZMByIntervalIntradayDetailLevelEnum = {
  _1min: "1min",
  _5min: "5min",
  _15min: "15min",
} as const;
export type GetAZMByIntervalIntradayDetailLevelEnum =
  (typeof GetAZMByIntervalIntradayDetailLevelEnum)[keyof typeof GetAZMByIntervalIntradayDetailLevelEnum];
/**
 * @export
 */
export const GetAZMByIntervalTimeSeriesIntradayDetailLevelEnum = {
  _1min: "1min",
  _5min: "5min",
  _15min: "15min",
} as const;
export type GetAZMByIntervalTimeSeriesIntradayDetailLevelEnum =
  (typeof GetAZMByIntervalTimeSeriesIntradayDetailLevelEnum)[keyof typeof GetAZMByIntervalTimeSeriesIntradayDetailLevelEnum];
