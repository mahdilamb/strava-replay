/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { Meal } from "../models/index";
import { MealFromJSON, MealToJSON } from "../models/index";

export interface AddFavoriteFoodRequest {
  foodId: string;
}

export interface AddFoodsRequest {
  name: string;
  defaultFoodMeasurementUnitId: string;
  defaultServingSize: string;
  calories: string;
  formType?: string;
  description?: string;
}

export interface AddFoodsLogRequest {
  foodId: string;
  mealTypeId: string;
  unitId: string;
  amount: string;
  date: Date;
  foodName?: string;
  favorite?: boolean;
  brandName?: string;
  calories?: number;
}

export interface AddMealRequest {
  meal: Meal;
}

export interface AddUpdateFoodsGoalRequest {
  calories: number;
  intensity?: string;
  personalized?: string;
}

export interface AddUpdateWaterGoalRequest {
  target: number;
}

export interface AddWaterLogRequest {
  date: Date;
  amount: number;
  unit?: string;
}

export interface DeleteFavoriteFoodRequest {
  foodId: string;
}

export interface DeleteFoodsRequest {
  foodId: string;
}

export interface DeleteFoodsLogRequest {
  foodLogId: string;
}

export interface DeleteMealRequest {
  mealId: string;
}

export interface DeleteWaterLogRequest {
  waterLogId: string;
}

export interface EditFoodsLogRequest {
  foodLogId: string;
  mealTypeId: string;
  unitId: string;
  amount: string;
  calories?: number;
}

export interface GetFoodsByDateRequest {
  date: Date;
}

export interface GetFoodsInfoRequest {
  foodId: string;
}

export interface GetFoodsListRequest {
  query: string;
}

export interface GetWaterByDateRequest {
  date: Date;
}

export interface UpdateMealRequest {
  meal: Meal;
}

export interface UpdateWaterLogRequest {
  waterLogId: string;
  amount: string;
  unit?: string;
}

/**
 *
 */
export class NutritionApi extends runtime.BaseAPI {
  /**
   * Updates a user\'s daily activity goals and returns a response using units in the unit system which corresponds to the Accept-Language header provided.
   * Add Favorite Food
   */
  async addFavoriteFoodRaw(
    requestParameters: AddFavoriteFoodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.foodId === null ||
      requestParameters.foodId === undefined
    ) {
      throw new runtime.RequiredError(
        "foodId",
        "Required parameter requestParameters.foodId was null or undefined when calling addFavoriteFood.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/favorite/{food-id}.json`.replace(
          `{${"food-id"}}`,
          encodeURIComponent(String(requestParameters.foodId)),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates a user\'s daily activity goals and returns a response using units in the unit system which corresponds to the Accept-Language header provided.
   * Add Favorite Food
   */
  async addFavoriteFood(
    requestParameters: AddFavoriteFoodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.addFavoriteFoodRaw(requestParameters, initOverrides);
  }

  /**
   * Creates a new private food for a user and returns a response in the format requested. The created food is found via the Search Foods call.
   * Create Food
   */
  async addFoodsRaw(
    requestParameters: AddFoodsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.name === null ||
      requestParameters.name === undefined
    ) {
      throw new runtime.RequiredError(
        "name",
        "Required parameter requestParameters.name was null or undefined when calling addFoods.",
      );
    }

    if (
      requestParameters.defaultFoodMeasurementUnitId === null ||
      requestParameters.defaultFoodMeasurementUnitId === undefined
    ) {
      throw new runtime.RequiredError(
        "defaultFoodMeasurementUnitId",
        "Required parameter requestParameters.defaultFoodMeasurementUnitId was null or undefined when calling addFoods.",
      );
    }

    if (
      requestParameters.defaultServingSize === null ||
      requestParameters.defaultServingSize === undefined
    ) {
      throw new runtime.RequiredError(
        "defaultServingSize",
        "Required parameter requestParameters.defaultServingSize was null or undefined when calling addFoods.",
      );
    }

    if (
      requestParameters.calories === null ||
      requestParameters.calories === undefined
    ) {
      throw new runtime.RequiredError(
        "calories",
        "Required parameter requestParameters.calories was null or undefined when calling addFoods.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.name !== undefined) {
      queryParameters["name"] = requestParameters.name;
    }

    if (requestParameters.defaultFoodMeasurementUnitId !== undefined) {
      queryParameters["defaultFoodMeasurementUnitId"] =
        requestParameters.defaultFoodMeasurementUnitId;
    }

    if (requestParameters.defaultServingSize !== undefined) {
      queryParameters["defaultServingSize"] =
        requestParameters.defaultServingSize;
    }

    if (requestParameters.calories !== undefined) {
      queryParameters["calories"] = requestParameters.calories;
    }

    if (requestParameters.formType !== undefined) {
      queryParameters["formType"] = requestParameters.formType;
    }

    if (requestParameters.description !== undefined) {
      queryParameters["description"] = requestParameters.description;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods.json`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Creates a new private food for a user and returns a response in the format requested. The created food is found via the Search Foods call.
   * Create Food
   */
  async addFoods(
    requestParameters: AddFoodsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.addFoodsRaw(requestParameters, initOverrides);
  }

  /**
   * Creates food log entries for users with or without foodId value.
   * Log Food
   */
  async addFoodsLogRaw(
    requestParameters: AddFoodsLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.foodId === null ||
      requestParameters.foodId === undefined
    ) {
      throw new runtime.RequiredError(
        "foodId",
        "Required parameter requestParameters.foodId was null or undefined when calling addFoodsLog.",
      );
    }

    if (
      requestParameters.mealTypeId === null ||
      requestParameters.mealTypeId === undefined
    ) {
      throw new runtime.RequiredError(
        "mealTypeId",
        "Required parameter requestParameters.mealTypeId was null or undefined when calling addFoodsLog.",
      );
    }

    if (
      requestParameters.unitId === null ||
      requestParameters.unitId === undefined
    ) {
      throw new runtime.RequiredError(
        "unitId",
        "Required parameter requestParameters.unitId was null or undefined when calling addFoodsLog.",
      );
    }

    if (
      requestParameters.amount === null ||
      requestParameters.amount === undefined
    ) {
      throw new runtime.RequiredError(
        "amount",
        "Required parameter requestParameters.amount was null or undefined when calling addFoodsLog.",
      );
    }

    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling addFoodsLog.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.foodId !== undefined) {
      queryParameters["foodId"] = requestParameters.foodId;
    }

    if (requestParameters.foodName !== undefined) {
      queryParameters["foodName"] = requestParameters.foodName;
    }

    if (requestParameters.mealTypeId !== undefined) {
      queryParameters["mealTypeId"] = requestParameters.mealTypeId;
    }

    if (requestParameters.unitId !== undefined) {
      queryParameters["unitId"] = requestParameters.unitId;
    }

    if (requestParameters.amount !== undefined) {
      queryParameters["amount"] = requestParameters.amount;
    }

    if (requestParameters.date !== undefined) {
      queryParameters["date"] = (requestParameters.date as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters.favorite !== undefined) {
      queryParameters["favorite"] = requestParameters.favorite;
    }

    if (requestParameters.brandName !== undefined) {
      queryParameters["brandName"] = requestParameters.brandName;
    }

    if (requestParameters.calories !== undefined) {
      queryParameters["calories"] = requestParameters.calories;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log.json`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Creates food log entries for users with or without foodId value.
   * Log Food
   */
  async addFoodsLog(
    requestParameters: AddFoodsLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.addFoodsLogRaw(requestParameters, initOverrides);
  }

  /**
   * Creates a meal with the given food contained in the post body.
   * Create Meal
   */
  async addMealRaw(
    requestParameters: AddMealRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.meal === null ||
      requestParameters.meal === undefined
    ) {
      throw new runtime.RequiredError(
        "meal",
        "Required parameter requestParameters.meal was null or undefined when calling addMeal.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/meals.json`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: MealToJSON(requestParameters.meal),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Creates a meal with the given food contained in the post body.
   * Create Meal
   */
  async addMeal(
    requestParameters: AddMealRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.addMealRaw(requestParameters, initOverrides);
  }

  /**
   * Updates a user\'s daily calories consumption goal or food plan and returns a response in the format requested.
   * Update Food Goal
   */
  async addUpdateFoodsGoalRaw(
    requestParameters: AddUpdateFoodsGoalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.calories === null ||
      requestParameters.calories === undefined
    ) {
      throw new runtime.RequiredError(
        "calories",
        "Required parameter requestParameters.calories was null or undefined when calling addUpdateFoodsGoal.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.calories !== undefined) {
      queryParameters["calories"] = requestParameters.calories;
    }

    if (requestParameters.intensity !== undefined) {
      queryParameters["intensity"] = requestParameters.intensity;
    }

    if (requestParameters.personalized !== undefined) {
      queryParameters["personalized"] = requestParameters.personalized;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/goal.json`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates a user\'s daily calories consumption goal or food plan and returns a response in the format requested.
   * Update Food Goal
   */
  async addUpdateFoodsGoal(
    requestParameters: AddUpdateFoodsGoalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.addUpdateFoodsGoalRaw(requestParameters, initOverrides);
  }

  /**
   * Updates a user\'s daily calories consumption goal or food plan and returns a response in the format requested.
   * Update Water Goal
   */
  async addUpdateWaterGoalRaw(
    requestParameters: AddUpdateWaterGoalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.target === null ||
      requestParameters.target === undefined
    ) {
      throw new runtime.RequiredError(
        "target",
        "Required parameter requestParameters.target was null or undefined when calling addUpdateWaterGoal.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.target !== undefined) {
      queryParameters["target"] = requestParameters.target;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/water/goal.json`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates a user\'s daily calories consumption goal or food plan and returns a response in the format requested.
   * Update Water Goal
   */
  async addUpdateWaterGoal(
    requestParameters: AddUpdateWaterGoalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.addUpdateWaterGoalRaw(requestParameters, initOverrides);
  }

  /**
   * Creates a log entry for water using units in the unit systems that corresponds to the Accept-Language header provided.
   * Log Water
   */
  async addWaterLogRaw(
    requestParameters: AddWaterLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling addWaterLog.",
      );
    }

    if (
      requestParameters.amount === null ||
      requestParameters.amount === undefined
    ) {
      throw new runtime.RequiredError(
        "amount",
        "Required parameter requestParameters.amount was null or undefined when calling addWaterLog.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.date !== undefined) {
      queryParameters["date"] = (requestParameters.date as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters.amount !== undefined) {
      queryParameters["amount"] = requestParameters.amount;
    }

    if (requestParameters.unit !== undefined) {
      queryParameters["unit"] = requestParameters.unit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/water.json`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Creates a log entry for water using units in the unit systems that corresponds to the Accept-Language header provided.
   * Log Water
   */
  async addWaterLog(
    requestParameters: AddWaterLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.addWaterLogRaw(requestParameters, initOverrides);
  }

  /**
   * Deletes a food with the given ID to the user\'s list of favorite foods.
   * Delete Favorite Food
   */
  async deleteFavoriteFoodRaw(
    requestParameters: DeleteFavoriteFoodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.foodId === null ||
      requestParameters.foodId === undefined
    ) {
      throw new runtime.RequiredError(
        "foodId",
        "Required parameter requestParameters.foodId was null or undefined when calling deleteFavoriteFood.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/favorite/{food-id}.json`.replace(
          `{${"food-id"}}`,
          encodeURIComponent(String(requestParameters.foodId)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes a food with the given ID to the user\'s list of favorite foods.
   * Delete Favorite Food
   */
  async deleteFavoriteFood(
    requestParameters: DeleteFavoriteFoodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteFavoriteFoodRaw(requestParameters, initOverrides);
  }

  /**
   * Deletes custom food for a user and returns a response in the format requested.
   * Delete Custom Food
   */
  async deleteFoodsRaw(
    requestParameters: DeleteFoodsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.foodId === null ||
      requestParameters.foodId === undefined
    ) {
      throw new runtime.RequiredError(
        "foodId",
        "Required parameter requestParameters.foodId was null or undefined when calling deleteFoods.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/{food-id}.json`.replace(
          `{${"food-id"}}`,
          encodeURIComponent(String(requestParameters.foodId)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes custom food for a user and returns a response in the format requested.
   * Delete Custom Food
   */
  async deleteFoods(
    requestParameters: DeleteFoodsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteFoodsRaw(requestParameters, initOverrides);
  }

  /**
   * Deletes a user\'s food log entry with the given ID.
   * Delete Food Log
   */
  async deleteFoodsLogRaw(
    requestParameters: DeleteFoodsLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.foodLogId === null ||
      requestParameters.foodLogId === undefined
    ) {
      throw new runtime.RequiredError(
        "foodLogId",
        "Required parameter requestParameters.foodLogId was null or undefined when calling deleteFoodsLog.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/{food-log-id}.json`.replace(
          `{${"food-log-id"}}`,
          encodeURIComponent(String(requestParameters.foodLogId)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes a user\'s food log entry with the given ID.
   * Delete Food Log
   */
  async deleteFoodsLog(
    requestParameters: DeleteFoodsLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteFoodsLogRaw(requestParameters, initOverrides);
  }

  /**
   * Deletes a user\'s meal with the given meal id.
   * Delete Meal
   */
  async deleteMealRaw(
    requestParameters: DeleteMealRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.mealId === null ||
      requestParameters.mealId === undefined
    ) {
      throw new runtime.RequiredError(
        "mealId",
        "Required parameter requestParameters.mealId was null or undefined when calling deleteMeal.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/meals/{meal-id}.json`.replace(
          `{${"meal-id"}}`,
          encodeURIComponent(String(requestParameters.mealId)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes a user\'s meal with the given meal id.
   * Delete Meal
   */
  async deleteMeal(
    requestParameters: DeleteMealRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteMealRaw(requestParameters, initOverrides);
  }

  /**
   * Deletes a user\'s water log entry with the given ID.
   * Delete Water Log
   */
  async deleteWaterLogRaw(
    requestParameters: DeleteWaterLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.waterLogId === null ||
      requestParameters.waterLogId === undefined
    ) {
      throw new runtime.RequiredError(
        "waterLogId",
        "Required parameter requestParameters.waterLogId was null or undefined when calling deleteWaterLog.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/water/{water-log-id}.json`.replace(
          `{${"water-log-id"}}`,
          encodeURIComponent(String(requestParameters.waterLogId)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes a user\'s water log entry with the given ID.
   * Delete Water Log
   */
  async deleteWaterLog(
    requestParameters: DeleteWaterLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteWaterLogRaw(requestParameters, initOverrides);
  }

  /**
   * The Edit Food Log endpoint changes the quantity or calories consumed for a user\'s food log entry with the given Food Log ID.
   * Edit Food Log
   */
  async editFoodsLogRaw(
    requestParameters: EditFoodsLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.foodLogId === null ||
      requestParameters.foodLogId === undefined
    ) {
      throw new runtime.RequiredError(
        "foodLogId",
        "Required parameter requestParameters.foodLogId was null or undefined when calling editFoodsLog.",
      );
    }

    if (
      requestParameters.mealTypeId === null ||
      requestParameters.mealTypeId === undefined
    ) {
      throw new runtime.RequiredError(
        "mealTypeId",
        "Required parameter requestParameters.mealTypeId was null or undefined when calling editFoodsLog.",
      );
    }

    if (
      requestParameters.unitId === null ||
      requestParameters.unitId === undefined
    ) {
      throw new runtime.RequiredError(
        "unitId",
        "Required parameter requestParameters.unitId was null or undefined when calling editFoodsLog.",
      );
    }

    if (
      requestParameters.amount === null ||
      requestParameters.amount === undefined
    ) {
      throw new runtime.RequiredError(
        "amount",
        "Required parameter requestParameters.amount was null or undefined when calling editFoodsLog.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.mealTypeId !== undefined) {
      queryParameters["mealTypeId"] = requestParameters.mealTypeId;
    }

    if (requestParameters.unitId !== undefined) {
      queryParameters["unitId"] = requestParameters.unitId;
    }

    if (requestParameters.amount !== undefined) {
      queryParameters["amount"] = requestParameters.amount;
    }

    if (requestParameters.calories !== undefined) {
      queryParameters["calories"] = requestParameters.calories;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/{food-log-id}.json`.replace(
          `{${"food-log-id"}}`,
          encodeURIComponent(String(requestParameters.foodLogId)),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * The Edit Food Log endpoint changes the quantity or calories consumed for a user\'s food log entry with the given Food Log ID.
   * Edit Food Log
   */
  async editFoodsLog(
    requestParameters: EditFoodsLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.editFoodsLogRaw(requestParameters, initOverrides);
  }

  /**
   * Returns a list of a user\'s favorite foods in the format requested. A favorite food in the list provides a quick way to log the food via the Log Food endpoint.
   * Get Favorite Foods
   */
  async getFavoriteFoodsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/favorite.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns a list of a user\'s favorite foods in the format requested. A favorite food in the list provides a quick way to log the food via the Log Food endpoint.
   * Get Favorite Foods
   */
  async getFavoriteFoods(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getFavoriteFoodsRaw(initOverrides);
  }

  /**
   * Retreives a summary and list of a user\'s food log entries for a given day in the format requested.
   * Get Food Logs
   */
  async getFoodsByDateRaw(
    requestParameters: GetFoodsByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getFoodsByDate.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/date/{date}.json`.replace(
          `{${"date"}}`,
          encodeURIComponent(String(requestParameters.date)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a summary and list of a user\'s food log entries for a given day in the format requested.
   * Get Food Logs
   */
  async getFoodsByDate(
    requestParameters: GetFoodsByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getFoodsByDateRaw(requestParameters, initOverrides);
  }

  /**
   * Returns a user\'s current daily calorie consumption goal and/or foodPlan value in the format requested.
   * Get Food Goals
   */
  async getFoodsGoalRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/goal.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns a user\'s current daily calorie consumption goal and/or foodPlan value in the format requested.
   * Get Food Goals
   */
  async getFoodsGoal(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getFoodsGoalRaw(initOverrides);
  }

  /**
   * Returns the details of a specific food in the Fitbit food databases or a private food that an authorized user has entered in the format requested.
   * Get Food
   */
  async getFoodsInfoRaw(
    requestParameters: GetFoodsInfoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.foodId === null ||
      requestParameters.foodId === undefined
    ) {
      throw new runtime.RequiredError(
        "foodId",
        "Required parameter requestParameters.foodId was null or undefined when calling getFoodsInfo.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/foods/{food-id}.json`.replace(
          `{${"food-id"}}`,
          encodeURIComponent(String(requestParameters.foodId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the details of a specific food in the Fitbit food databases or a private food that an authorized user has entered in the format requested.
   * Get Food
   */
  async getFoodsInfo(
    requestParameters: GetFoodsInfoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getFoodsInfoRaw(requestParameters, initOverrides);
  }

  /**
   * Returns a list of public foods from the Fitbit food database and private food the user created in the format requested.
   * Search Foods
   */
  async getFoodsListRaw(
    requestParameters: GetFoodsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.query === null ||
      requestParameters.query === undefined
    ) {
      throw new runtime.RequiredError(
        "query",
        "Required parameter requestParameters.query was null or undefined when calling getFoodsList.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.query !== undefined) {
      queryParameters["query"] = requestParameters.query;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/foods/search.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns a list of public foods from the Fitbit food database and private food the user created in the format requested.
   * Search Foods
   */
  async getFoodsList(
    requestParameters: GetFoodsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getFoodsListRaw(requestParameters, initOverrides);
  }

  /**
   * Returns the food locales that the user may choose to search, log, and create food in.
   * Get Food Locales
   */
  async getFoodsLocalesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/foods/locales.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the food locales that the user may choose to search, log, and create food in.
   * Get Food Locales
   */
  async getFoodsLocales(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getFoodsLocalesRaw(initOverrides);
  }

  /**
   * Returns a list of all valid Fitbit food units in the format requested.
   * Get Food Units
   */
  async getFoodsUnitsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/foods/units.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns a list of all valid Fitbit food units in the format requested.
   * Get Food Units
   */
  async getFoodsUnits(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getFoodsUnitsRaw(initOverrides);
  }

  /**
   * Returns a list of a user\'s frequent foods in the format requested. A frequent food in the list provides a quick way to log the food via the Log Food endpoint.
   * Get Frequent Foods
   */
  async getFrequentFoodsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/frequent.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns a list of a user\'s frequent foods in the format requested. A frequent food in the list provides a quick way to log the food via the Log Food endpoint.
   * Get Frequent Foods
   */
  async getFrequentFoods(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getFrequentFoodsRaw(initOverrides);
  }

  /**
   * Returns a list of meals created by user in the user\'s food log in the format requested. User creates and manages meals on the Food Log tab on the website.
   * Get Meals
   */
  async getMealsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/meals.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns a list of meals created by user in the user\'s food log in the format requested. User creates and manages meals on the Food Log tab on the website.
   * Get Meals
   */
  async getMeals(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getMealsRaw(initOverrides);
  }

  /**
   * Returns a list of a user\'s frequent foods in the format requested. A frequent food in the list provides a quick way to log the food via the Log Food endpoint.
   * Get Recent Foods
   */
  async getRecentFoodsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/recent.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns a list of a user\'s frequent foods in the format requested. A frequent food in the list provides a quick way to log the food via the Log Food endpoint.
   * Get Recent Foods
   */
  async getRecentFoods(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getRecentFoodsRaw(initOverrides);
  }

  /**
   * Retreives a summary and list of a user\'s water log entries for a given day in the requested using units in the unit system that corresponds to the Accept-Language header provided.
   * Get Water Logs
   */
  async getWaterByDateRaw(
    requestParameters: GetWaterByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getWaterByDate.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/water/date/{date}.json`.replace(
          `{${"date"}}`,
          encodeURIComponent(String(requestParameters.date)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a summary and list of a user\'s water log entries for a given day in the requested using units in the unit system that corresponds to the Accept-Language header provided.
   * Get Water Logs
   */
  async getWaterByDate(
    requestParameters: GetWaterByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getWaterByDateRaw(requestParameters, initOverrides);
  }

  /**
   * Retreives a summary and list of a user\'s water goal entries for a given day in the requested using units in the unit system that corresponds to the Accept-Language header provided.
   * Get Water Goal
   */
  async getWaterGoalRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/water/goal.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a summary and list of a user\'s water goal entries for a given day in the requested using units in the unit system that corresponds to the Accept-Language header provided.
   * Get Water Goal
   */
  async getWaterGoal(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getWaterGoalRaw(initOverrides);
  }

  /**
   * Replaces an existing meal with the contents of the request. The response contains the updated meal.
   * Update Meal
   */
  async updateMealRaw(
    requestParameters: UpdateMealRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.meal === null ||
      requestParameters.meal === undefined
    ) {
      throw new runtime.RequiredError(
        "meal",
        "Required parameter requestParameters.meal was null or undefined when calling updateMeal.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/meals/{meal-id}.json`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: MealToJSON(requestParameters.meal),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Replaces an existing meal with the contents of the request. The response contains the updated meal.
   * Update Meal
   */
  async updateMeal(
    requestParameters: UpdateMealRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.updateMealRaw(requestParameters, initOverrides);
  }

  /**
   * Updates a user\'s water log entry with the given ID.
   * Update Water Log
   */
  async updateWaterLogRaw(
    requestParameters: UpdateWaterLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.waterLogId === null ||
      requestParameters.waterLogId === undefined
    ) {
      throw new runtime.RequiredError(
        "waterLogId",
        "Required parameter requestParameters.waterLogId was null or undefined when calling updateWaterLog.",
      );
    }

    if (
      requestParameters.amount === null ||
      requestParameters.amount === undefined
    ) {
      throw new runtime.RequiredError(
        "amount",
        "Required parameter requestParameters.amount was null or undefined when calling updateWaterLog.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.amount !== undefined) {
      queryParameters["amount"] = requestParameters.amount;
    }

    if (requestParameters.unit !== undefined) {
      queryParameters["unit"] = requestParameters.unit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/water/{water-log-id}.json`.replace(
          `{${"water-log-id"}}`,
          encodeURIComponent(String(requestParameters.waterLogId)),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates a user\'s water log entry with the given ID.
   * Update Water Log
   */
  async updateWaterLog(
    requestParameters: UpdateWaterLogRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.updateWaterLogRaw(requestParameters, initOverrides);
  }
}
