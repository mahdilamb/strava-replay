/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface SummaryAthlete
 */
export interface SummaryAthlete {
  /**
   * The unique identifier of the athlete
   * @type {number}
   * @memberof SummaryAthlete
   */
  id?: number;
  /**
   * Resource state, indicates level of detail. Possible values: 1 -> "meta", 2 -> "summary", 3 -> "detail"
   * @type {number}
   * @memberof SummaryAthlete
   */
  resourceState?: number;
  /**
   * The athlete's first name.
   * @type {string}
   * @memberof SummaryAthlete
   */
  firstname?: string;
  /**
   * The athlete's last name.
   * @type {string}
   * @memberof SummaryAthlete
   */
  lastname?: string;
  /**
   * URL to a 62x62 pixel profile picture.
   * @type {string}
   * @memberof SummaryAthlete
   */
  profileMedium?: string;
  /**
   * URL to a 124x124 pixel profile picture.
   * @type {string}
   * @memberof SummaryAthlete
   */
  profile?: string;
  /**
   * The athlete's city.
   * @type {string}
   * @memberof SummaryAthlete
   */
  city?: string;
  /**
   * The athlete's state or geographical region.
   * @type {string}
   * @memberof SummaryAthlete
   */
  state?: string;
  /**
   * The athlete's country.
   * @type {string}
   * @memberof SummaryAthlete
   */
  country?: string;
  /**
   * The athlete's sex.
   * @type {string}
   * @memberof SummaryAthlete
   */
  sex?: SummaryAthleteSexEnum;
  /**
   * Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.
   * @type {boolean}
   * @memberof SummaryAthlete
   */
  premium?: boolean;
  /**
   * Whether the athlete has any Summit subscription.
   * @type {boolean}
   * @memberof SummaryAthlete
   */
  summit?: boolean;
  /**
   * The time at which the athlete was created.
   * @type {Date}
   * @memberof SummaryAthlete
   */
  createdAt?: Date;
  /**
   * The time at which the athlete was last updated.
   * @type {Date}
   * @memberof SummaryAthlete
   */
  updatedAt?: Date;
}

/**
 * @export
 */
export const SummaryAthleteSexEnum = {
  M: "M",
  F: "F",
} as const;
export type SummaryAthleteSexEnum =
  (typeof SummaryAthleteSexEnum)[keyof typeof SummaryAthleteSexEnum];

/**
 * Check if a given object implements the SummaryAthlete interface.
 */
export function instanceOfSummaryAthlete(
  value: object,
): value is SummaryAthlete {
  return true;
}

export function SummaryAthleteFromJSON(json: any): SummaryAthlete {
  return SummaryAthleteFromJSONTyped(json, false);
}

export function SummaryAthleteFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SummaryAthlete {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"] == null ? undefined : json["id"],
    resourceState:
      json["resource_state"] == null ? undefined : json["resource_state"],
    firstname: json["firstname"] == null ? undefined : json["firstname"],
    lastname: json["lastname"] == null ? undefined : json["lastname"],
    profileMedium:
      json["profile_medium"] == null ? undefined : json["profile_medium"],
    profile: json["profile"] == null ? undefined : json["profile"],
    city: json["city"] == null ? undefined : json["city"],
    state: json["state"] == null ? undefined : json["state"],
    country: json["country"] == null ? undefined : json["country"],
    sex: json["sex"] == null ? undefined : json["sex"],
    premium: json["premium"] == null ? undefined : json["premium"],
    summit: json["summit"] == null ? undefined : json["summit"],
    createdAt:
      json["created_at"] == null ? undefined : new Date(json["created_at"]),
    updatedAt:
      json["updated_at"] == null ? undefined : new Date(json["updated_at"]),
  };
}

export function SummaryAthleteToJSON(json: any): SummaryAthlete {
  return SummaryAthleteToJSONTyped(json, false);
}

export function SummaryAthleteToJSONTyped(
  value?: SummaryAthlete | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    resource_state: value["resourceState"],
    firstname: value["firstname"],
    lastname: value["lastname"],
    profile_medium: value["profileMedium"],
    profile: value["profile"],
    city: value["city"],
    state: value["state"],
    country: value["country"],
    sex: value["sex"],
    premium: value["premium"],
    summit: value["summit"],
    created_at:
      value["createdAt"] == null ? undefined : value["createdAt"].toISOString(),
    updated_at:
      value["updatedAt"] == null ? undefined : value["updatedAt"].toISOString(),
  };
}
