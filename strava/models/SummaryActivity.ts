/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { ActivityType } from "./ActivityType";
import {
  ActivityTypeFromJSON,
  ActivityTypeFromJSONTyped,
  ActivityTypeToJSON,
} from "./ActivityType";
import type { MetaAthlete } from "./MetaAthlete";
import {
  MetaAthleteFromJSON,
  MetaAthleteFromJSONTyped,
  MetaAthleteToJSON,
} from "./MetaAthlete";
import type { PolylineMap } from "./PolylineMap";
import {
  PolylineMapFromJSON,
  PolylineMapFromJSONTyped,
  PolylineMapToJSON,
} from "./PolylineMap";
import type { SportType } from "./SportType";
import {
  SportTypeFromJSON,
  SportTypeFromJSONTyped,
  SportTypeToJSON,
} from "./SportType";

/**
 *
 * @export
 * @interface SummaryActivity
 */
export interface SummaryActivity {
  /**
   * The unique identifier of the activity
   * @type {number}
   * @memberof SummaryActivity
   */
  id?: number;
  /**
   * The identifier provided at upload time
   * @type {string}
   * @memberof SummaryActivity
   */
  externalId?: string;
  /**
   * The identifier of the upload that resulted in this activity
   * @type {number}
   * @memberof SummaryActivity
   */
  uploadId?: number;
  /**
   *
   * @type {MetaAthlete}
   * @memberof SummaryActivity
   */
  athlete?: MetaAthlete;
  /**
   * The name of the activity
   * @type {string}
   * @memberof SummaryActivity
   */
  name?: string;
  /**
   * The activity's distance, in meters
   * @type {number}
   * @memberof SummaryActivity
   */
  distance?: number;
  /**
   * The activity's moving time, in seconds
   * @type {number}
   * @memberof SummaryActivity
   */
  movingTime?: number;
  /**
   * The activity's elapsed time, in seconds
   * @type {number}
   * @memberof SummaryActivity
   */
  elapsedTime?: number;
  /**
   * The activity's total elevation gain.
   * @type {number}
   * @memberof SummaryActivity
   */
  totalElevationGain?: number;
  /**
   * The activity's highest elevation, in meters
   * @type {number}
   * @memberof SummaryActivity
   */
  elevHigh?: number;
  /**
   * The activity's lowest elevation, in meters
   * @type {number}
   * @memberof SummaryActivity
   */
  elevLow?: number;
  /**
   *
   * @type {ActivityType}
   * @memberof SummaryActivity
   */
  type?: ActivityType;
  /**
   *
   * @type {SportType}
   * @memberof SummaryActivity
   */
  sportType?: SportType;
  /**
   * The time at which the activity was started.
   * @type {Date}
   * @memberof SummaryActivity
   */
  startDate?: Date;
  /**
   * The time at which the activity was started in the local timezone.
   * @type {Date}
   * @memberof SummaryActivity
   */
  startDateLocal?: Date;
  /**
   * The timezone of the activity
   * @type {string}
   * @memberof SummaryActivity
   */
  timezone?: string;
  /**
   * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type {Array<number>}
   * @memberof SummaryActivity
   */
  startLatlng?: Array<number>;
  /**
   * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type {Array<number>}
   * @memberof SummaryActivity
   */
  endLatlng?: Array<number>;
  /**
   * The number of achievements gained during this activity
   * @type {number}
   * @memberof SummaryActivity
   */
  achievementCount?: number;
  /**
   * The number of kudos given for this activity
   * @type {number}
   * @memberof SummaryActivity
   */
  kudosCount?: number;
  /**
   * The number of comments for this activity
   * @type {number}
   * @memberof SummaryActivity
   */
  commentCount?: number;
  /**
   * The number of athletes for taking part in a group activity
   * @type {number}
   * @memberof SummaryActivity
   */
  athleteCount?: number;
  /**
   * The number of Instagram photos for this activity
   * @type {number}
   * @memberof SummaryActivity
   */
  photoCount?: number;
  /**
   * The number of Instagram and Strava photos for this activity
   * @type {number}
   * @memberof SummaryActivity
   */
  totalPhotoCount?: number;
  /**
   *
   * @type {PolylineMap}
   * @memberof SummaryActivity
   */
  map?: PolylineMap;
  /**
   * Whether this activity was recorded on a training machine
   * @type {boolean}
   * @memberof SummaryActivity
   */
  trainer?: boolean;
  /**
   * Whether this activity is a commute
   * @type {boolean}
   * @memberof SummaryActivity
   */
  commute?: boolean;
  /**
   * Whether this activity was created manually
   * @type {boolean}
   * @memberof SummaryActivity
   */
  manual?: boolean;
  /**
   * Whether this activity is private
   * @type {boolean}
   * @memberof SummaryActivity
   */
  _private?: boolean;
  /**
   * Whether this activity is flagged
   * @type {boolean}
   * @memberof SummaryActivity
   */
  flagged?: boolean;
  /**
   * The activity's workout type
   * @type {number}
   * @memberof SummaryActivity
   */
  workoutType?: number;
  /**
   * The unique identifier of the upload in string format
   * @type {string}
   * @memberof SummaryActivity
   */
  uploadIdStr?: string;
  /**
   * The activity's average speed, in meters per second
   * @type {number}
   * @memberof SummaryActivity
   */
  averageSpeed?: number;
  /**
   * The activity's max speed, in meters per second
   * @type {number}
   * @memberof SummaryActivity
   */
  maxSpeed?: number;
  /**
   * Whether the logged-in athlete has kudoed this activity
   * @type {boolean}
   * @memberof SummaryActivity
   */
  hasKudoed?: boolean;
  /**
   * Whether the activity is muted
   * @type {boolean}
   * @memberof SummaryActivity
   */
  hideFromHome?: boolean;
  /**
   * The id of the gear for the activity
   * @type {string}
   * @memberof SummaryActivity
   */
  gearId?: string;
  /**
   * The total work done in kilojoules during this activity. Rides only
   * @type {number}
   * @memberof SummaryActivity
   */
  kilojoules?: number;
  /**
   * Average power output in watts during this activity. Rides only
   * @type {number}
   * @memberof SummaryActivity
   */
  averageWatts?: number;
  /**
   * Whether the watts are from a power meter, false if estimated
   * @type {boolean}
   * @memberof SummaryActivity
   */
  deviceWatts?: boolean;
  /**
   * Rides with power meter data only
   * @type {number}
   * @memberof SummaryActivity
   */
  maxWatts?: number;
  /**
   * Similar to Normalized Power. Rides with power meter data only
   * @type {number}
   * @memberof SummaryActivity
   */
  weightedAverageWatts?: number;
}

/**
 * Check if a given object implements the SummaryActivity interface.
 */
export function instanceOfSummaryActivity(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function SummaryActivityFromJSON(json: any): SummaryActivity {
  return SummaryActivityFromJSONTyped(json, false);
}

export function SummaryActivityFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SummaryActivity {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, "id") ? undefined : json["id"],
    externalId: !exists(json, "external_id") ? undefined : json["external_id"],
    uploadId: !exists(json, "upload_id") ? undefined : json["upload_id"],
    athlete: !exists(json, "athlete")
      ? undefined
      : MetaAthleteFromJSON(json["athlete"]),
    name: !exists(json, "name") ? undefined : json["name"],
    distance: !exists(json, "distance") ? undefined : json["distance"],
    movingTime: !exists(json, "moving_time") ? undefined : json["moving_time"],
    elapsedTime: !exists(json, "elapsed_time")
      ? undefined
      : json["elapsed_time"],
    totalElevationGain: !exists(json, "total_elevation_gain")
      ? undefined
      : json["total_elevation_gain"],
    elevHigh: !exists(json, "elev_high") ? undefined : json["elev_high"],
    elevLow: !exists(json, "elev_low") ? undefined : json["elev_low"],
    type: !exists(json, "type")
      ? undefined
      : ActivityTypeFromJSON(json["type"]),
    sportType: !exists(json, "sport_type")
      ? undefined
      : SportTypeFromJSON(json["sport_type"]),
    startDate: !exists(json, "start_date")
      ? undefined
      : new Date(json["start_date"]),
    startDateLocal: !exists(json, "start_date_local")
      ? undefined
      : new Date(json["start_date_local"]),
    timezone: !exists(json, "timezone") ? undefined : json["timezone"],
    startLatlng: !exists(json, "start_latlng")
      ? undefined
      : json["start_latlng"],
    endLatlng: !exists(json, "end_latlng") ? undefined : json["end_latlng"],
    achievementCount: !exists(json, "achievement_count")
      ? undefined
      : json["achievement_count"],
    kudosCount: !exists(json, "kudos_count") ? undefined : json["kudos_count"],
    commentCount: !exists(json, "comment_count")
      ? undefined
      : json["comment_count"],
    athleteCount: !exists(json, "athlete_count")
      ? undefined
      : json["athlete_count"],
    photoCount: !exists(json, "photo_count") ? undefined : json["photo_count"],
    totalPhotoCount: !exists(json, "total_photo_count")
      ? undefined
      : json["total_photo_count"],
    map: !exists(json, "map") ? undefined : PolylineMapFromJSON(json["map"]),
    trainer: !exists(json, "trainer") ? undefined : json["trainer"],
    commute: !exists(json, "commute") ? undefined : json["commute"],
    manual: !exists(json, "manual") ? undefined : json["manual"],
    _private: !exists(json, "private") ? undefined : json["private"],
    flagged: !exists(json, "flagged") ? undefined : json["flagged"],
    workoutType: !exists(json, "workout_type")
      ? undefined
      : json["workout_type"],
    uploadIdStr: !exists(json, "upload_id_str")
      ? undefined
      : json["upload_id_str"],
    averageSpeed: !exists(json, "average_speed")
      ? undefined
      : json["average_speed"],
    maxSpeed: !exists(json, "max_speed") ? undefined : json["max_speed"],
    hasKudoed: !exists(json, "has_kudoed") ? undefined : json["has_kudoed"],
    hideFromHome: !exists(json, "hide_from_home")
      ? undefined
      : json["hide_from_home"],
    gearId: !exists(json, "gear_id") ? undefined : json["gear_id"],
    kilojoules: !exists(json, "kilojoules") ? undefined : json["kilojoules"],
    averageWatts: !exists(json, "average_watts")
      ? undefined
      : json["average_watts"],
    deviceWatts: !exists(json, "device_watts")
      ? undefined
      : json["device_watts"],
    maxWatts: !exists(json, "max_watts") ? undefined : json["max_watts"],
    weightedAverageWatts: !exists(json, "weighted_average_watts")
      ? undefined
      : json["weighted_average_watts"],
  };
}

export function SummaryActivityToJSON(value?: SummaryActivity | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    external_id: value.externalId,
    upload_id: value.uploadId,
    athlete: MetaAthleteToJSON(value.athlete),
    name: value.name,
    distance: value.distance,
    moving_time: value.movingTime,
    elapsed_time: value.elapsedTime,
    total_elevation_gain: value.totalElevationGain,
    elev_high: value.elevHigh,
    elev_low: value.elevLow,
    type: ActivityTypeToJSON(value.type),
    sport_type: SportTypeToJSON(value.sportType),
    start_date:
      value.startDate === undefined ? undefined : value.startDate.toISOString(),
    start_date_local:
      value.startDateLocal === undefined
        ? undefined
        : value.startDateLocal.toISOString(),
    timezone: value.timezone,
    start_latlng: value.startLatlng,
    end_latlng: value.endLatlng,
    achievement_count: value.achievementCount,
    kudos_count: value.kudosCount,
    comment_count: value.commentCount,
    athlete_count: value.athleteCount,
    photo_count: value.photoCount,
    total_photo_count: value.totalPhotoCount,
    map: PolylineMapToJSON(value.map),
    trainer: value.trainer,
    commute: value.commute,
    manual: value.manual,
    private: value._private,
    flagged: value.flagged,
    workout_type: value.workoutType,
    upload_id_str: value.uploadIdStr,
    average_speed: value.averageSpeed,
    max_speed: value.maxSpeed,
    has_kudoed: value.hasKudoed,
    hide_from_home: value.hideFromHome,
    gear_id: value.gearId,
    kilojoules: value.kilojoules,
    average_watts: value.averageWatts,
    device_watts: value.deviceWatts,
    max_watts: value.maxWatts,
    weighted_average_watts: value.weightedAverageWatts,
  };
}
