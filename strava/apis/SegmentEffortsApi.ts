/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { DetailedSegmentEffort, Fault } from "../models/index";
import {
  DetailedSegmentEffortFromJSON,
  DetailedSegmentEffortToJSON,
  FaultFromJSON,
  FaultToJSON,
} from "../models/index";

export interface GetEffortsBySegmentIdRequest {
  segmentId: number;
  startDateLocal?: Date;
  endDateLocal?: Date;
  perPage?: number;
}

export interface GetSegmentEffortByIdRequest {
  id: number;
}

/**
 *
 */
export class SegmentEffortsApi extends runtime.BaseAPI {
  /**
   * Returns a set of the authenticated athlete\'s segment efforts for a given segment.  Requires subscription.
   * List Segment Efforts
   */
  async getEffortsBySegmentIdRaw(
    requestParameters: GetEffortsBySegmentIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<DetailedSegmentEffort>>> {
    if (
      requestParameters.segmentId === null ||
      requestParameters.segmentId === undefined
    ) {
      throw new runtime.RequiredError(
        "segmentId",
        "Required parameter requestParameters.segmentId was null or undefined when calling getEffortsBySegmentId.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.segmentId !== undefined) {
      queryParameters["segment_id"] = requestParameters.segmentId;
    }

    if (requestParameters.startDateLocal !== undefined) {
      queryParameters["start_date_local"] = (
        requestParameters.startDateLocal as any
      ).toISOString();
    }

    if (requestParameters.endDateLocal !== undefined) {
      queryParameters["end_date_local"] = (
        requestParameters.endDateLocal as any
      ).toISOString();
    }

    if (requestParameters.perPage !== undefined) {
      queryParameters["per_page"] = requestParameters.perPage;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/segment_efforts`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(DetailedSegmentEffortFromJSON),
    );
  }

  /**
   * Returns a set of the authenticated athlete\'s segment efforts for a given segment.  Requires subscription.
   * List Segment Efforts
   */
  async getEffortsBySegmentId(
    requestParameters: GetEffortsBySegmentIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<DetailedSegmentEffort>> {
    const response = await this.getEffortsBySegmentIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.
   * Get Segment Effort
   */
  async getSegmentEffortByIdRaw(
    requestParameters: GetSegmentEffortByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DetailedSegmentEffort>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getSegmentEffortById.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/segment_efforts/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DetailedSegmentEffortFromJSON(jsonValue),
    );
  }

  /**
   * Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.
   * Get Segment Effort
   */
  async getSegmentEffortById(
    requestParameters: GetSegmentEffortByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DetailedSegmentEffort> {
    const response = await this.getSegmentEffortByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
