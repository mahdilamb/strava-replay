/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ClubActivity,
  ClubAthlete,
  DetailedClub,
  Fault,
  SummaryAthlete,
  SummaryClub,
} from "../models/index";
import {
  ClubActivityFromJSON,
  ClubActivityToJSON,
  ClubAthleteFromJSON,
  ClubAthleteToJSON,
  DetailedClubFromJSON,
  DetailedClubToJSON,
  FaultFromJSON,
  FaultToJSON,
  SummaryAthleteFromJSON,
  SummaryAthleteToJSON,
  SummaryClubFromJSON,
  SummaryClubToJSON,
} from "../models/index";

export interface GetClubActivitiesByIdRequest {
  id: number;
  page?: number;
  perPage?: number;
}

export interface GetClubAdminsByIdRequest {
  id: number;
  page?: number;
  perPage?: number;
}

export interface GetClubByIdRequest {
  id: number;
}

export interface GetClubMembersByIdRequest {
  id: number;
  page?: number;
  perPage?: number;
}

export interface GetLoggedInAthleteClubsRequest {
  page?: number;
  perPage?: number;
}

/**
 *
 */
export class ClubsApi extends runtime.BaseAPI {
  /**
   * Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
   * List Club Activities
   */
  async getClubActivitiesByIdRaw(
    requestParameters: GetClubActivitiesByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<ClubActivity>>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getClubActivitiesById().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["perPage"] != null) {
      queryParameters["per_page"] = requestParameters["perPage"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/clubs/{id}/activities`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ClubActivityFromJSON),
    );
  }

  /**
   * Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
   * List Club Activities
   */
  async getClubActivitiesById(
    requestParameters: GetClubActivitiesByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<ClubActivity>> {
    const response = await this.getClubActivitiesByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns a list of the administrators of a given club.
   * List Club Administrators
   */
  async getClubAdminsByIdRaw(
    requestParameters: GetClubAdminsByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<SummaryAthlete>>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getClubAdminsById().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["perPage"] != null) {
      queryParameters["per_page"] = requestParameters["perPage"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/clubs/{id}/admins`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(SummaryAthleteFromJSON),
    );
  }

  /**
   * Returns a list of the administrators of a given club.
   * List Club Administrators
   */
  async getClubAdminsById(
    requestParameters: GetClubAdminsByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<SummaryAthlete>> {
    const response = await this.getClubAdminsByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns a given club using its identifier.
   * Get Club
   */
  async getClubByIdRaw(
    requestParameters: GetClubByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DetailedClub>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getClubById().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/clubs/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DetailedClubFromJSON(jsonValue),
    );
  }

  /**
   * Returns a given club using its identifier.
   * Get Club
   */
  async getClubById(
    requestParameters: GetClubByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DetailedClub> {
    const response = await this.getClubByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns a list of the athletes who are members of a given club.
   * List Club Members
   */
  async getClubMembersByIdRaw(
    requestParameters: GetClubMembersByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<ClubAthlete>>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getClubMembersById().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["perPage"] != null) {
      queryParameters["per_page"] = requestParameters["perPage"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/clubs/{id}/members`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ClubAthleteFromJSON),
    );
  }

  /**
   * Returns a list of the athletes who are members of a given club.
   * List Club Members
   */
  async getClubMembersById(
    requestParameters: GetClubMembersByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<ClubAthlete>> {
    const response = await this.getClubMembersByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns a list of the clubs whose membership includes the authenticated athlete.
   * List Athlete Clubs
   */
  async getLoggedInAthleteClubsRaw(
    requestParameters: GetLoggedInAthleteClubsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<SummaryClub>>> {
    const queryParameters: any = {};

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["perPage"] != null) {
      queryParameters["per_page"] = requestParameters["perPage"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/athlete/clubs`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(SummaryClubFromJSON),
    );
  }

  /**
   * Returns a list of the clubs whose membership includes the authenticated athlete.
   * List Athlete Clubs
   */
  async getLoggedInAthleteClubs(
    requestParameters: GetLoggedInAthleteClubsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<SummaryClub>> {
    const response = await this.getLoggedInAthleteClubsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
