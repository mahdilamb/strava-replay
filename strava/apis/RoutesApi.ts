/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { Fault, Route } from "../models/index";
import {
  FaultFromJSON,
  FaultToJSON,
  RouteFromJSON,
  RouteToJSON,
} from "../models/index";

export interface GetRouteAsGPXRequest {
  id: number;
}

export interface GetRouteAsTCXRequest {
  id: number;
}

export interface GetRouteByIdRequest {
  id: number;
}

export interface GetRoutesByAthleteIdRequest {
  page?: number;
  perPage?: number;
}

/**
 *
 */
export class RoutesApi extends runtime.BaseAPI {
  /**
   * Returns a GPX file of the route. Requires read_all scope for private routes.
   * Export Route GPX
   */
  async getRouteAsGPXRaw(
    requestParameters: GetRouteAsGPXRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getRouteAsGPX().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/routes/{id}/export_gpx`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns a GPX file of the route. Requires read_all scope for private routes.
   * Export Route GPX
   */
  async getRouteAsGPX(
    requestParameters: GetRouteAsGPXRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getRouteAsGPXRaw(requestParameters, initOverrides);
  }

  /**
   * Returns a TCX file of the route. Requires read_all scope for private routes.
   * Export Route TCX
   */
  async getRouteAsTCXRaw(
    requestParameters: GetRouteAsTCXRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getRouteAsTCX().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/routes/{id}/export_tcx`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns a TCX file of the route. Requires read_all scope for private routes.
   * Export Route TCX
   */
  async getRouteAsTCX(
    requestParameters: GetRouteAsTCXRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getRouteAsTCXRaw(requestParameters, initOverrides);
  }

  /**
   * Returns a route using its identifier. Requires read_all scope for private routes.
   * Get Route
   */
  async getRouteByIdRaw(
    requestParameters: GetRouteByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Route>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getRouteById().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/routes/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RouteFromJSON(jsonValue),
    );
  }

  /**
   * Returns a route using its identifier. Requires read_all scope for private routes.
   * Get Route
   */
  async getRouteById(
    requestParameters: GetRouteByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Route> {
    const response = await this.getRouteByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns a list of the routes created by the authenticated athlete. Private routes are filtered out unless requested by a token with read_all scope.
   * List Athlete Routes
   */
  async getRoutesByAthleteIdRaw(
    requestParameters: GetRoutesByAthleteIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Route>>> {
    const queryParameters: any = {};

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["perPage"] != null) {
      queryParameters["per_page"] = requestParameters["perPage"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/athletes/{id}/routes`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(RouteFromJSON),
    );
  }

  /**
   * Returns a list of the routes created by the authenticated athlete. Private routes are filtered out unless requested by a token with read_all scope.
   * List Athlete Routes
   */
  async getRoutesByAthleteId(
    requestParameters: GetRoutesByAthleteIdRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Route>> {
    const response = await this.getRoutesByAthleteIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
