/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface GetFoodsByDateRangeRequest {
  resourcePath: GetFoodsByDateRangeResourcePathEnum;
  baseDate: Date;
  endDate: Date;
}

export interface GetFoodsResourceByDatePeriodRequest {
  resourcePath: GetFoodsResourceByDatePeriodResourcePathEnum;
  date: Date;
  period: string;
}

/**
 *
 */
export class NutritionTimeSeriesApi extends runtime.BaseAPI {
  /**
   * Updates a user\'s daily activity goals and returns a response using units in the unit system which corresponds to the Accept-Language header provided.
   * Get Food or Water Time Series
   */
  async getFoodsByDateRangeRaw(
    requestParameters: GetFoodsByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.resourcePath === null ||
      requestParameters.resourcePath === undefined
    ) {
      throw new runtime.RequiredError(
        "resourcePath",
        "Required parameter requestParameters.resourcePath was null or undefined when calling getFoodsByDateRange.",
      );
    }

    if (
      requestParameters.baseDate === null ||
      requestParameters.baseDate === undefined
    ) {
      throw new runtime.RequiredError(
        "baseDate",
        "Required parameter requestParameters.baseDate was null or undefined when calling getFoodsByDateRange.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getFoodsByDateRange.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/{resource-path}/date/{base-date}/{end-date}.json`
          .replace(
            `{${"resource-path"}}`,
            encodeURIComponent(String(requestParameters.resourcePath)),
          )
          .replace(
            `{${"base-date"}}`,
            encodeURIComponent(String(requestParameters.baseDate)),
          )
          .replace(
            `{${"end-date"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates a user\'s daily activity goals and returns a response using units in the unit system which corresponds to the Accept-Language header provided.
   * Get Food or Water Time Series
   */
  async getFoodsByDateRange(
    requestParameters: GetFoodsByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getFoodsByDateRangeRaw(requestParameters, initOverrides);
  }

  /**
   * Updates a user\'s daily activity goals and returns a response using units in the unit system which corresponds to the Accept-Language header provided.
   * Get Food or Water Time Series
   */
  async getFoodsResourceByDatePeriodRaw(
    requestParameters: GetFoodsResourceByDatePeriodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.resourcePath === null ||
      requestParameters.resourcePath === undefined
    ) {
      throw new runtime.RequiredError(
        "resourcePath",
        "Required parameter requestParameters.resourcePath was null or undefined when calling getFoodsResourceByDatePeriod.",
      );
    }

    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getFoodsResourceByDatePeriod.",
      );
    }

    if (
      requestParameters.period === null ||
      requestParameters.period === undefined
    ) {
      throw new runtime.RequiredError(
        "period",
        "Required parameter requestParameters.period was null or undefined when calling getFoodsResourceByDatePeriod.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["nutrition"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/foods/log/{resource-path}/date/{date}/{period}.json`
          .replace(
            `{${"resource-path"}}`,
            encodeURIComponent(String(requestParameters.resourcePath)),
          )
          .replace(
            `{${"date"}}`,
            encodeURIComponent(String(requestParameters.date)),
          )
          .replace(
            `{${"period"}}`,
            encodeURIComponent(String(requestParameters.period)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates a user\'s daily activity goals and returns a response using units in the unit system which corresponds to the Accept-Language header provided.
   * Get Food or Water Time Series
   */
  async getFoodsResourceByDatePeriod(
    requestParameters: GetFoodsResourceByDatePeriodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getFoodsResourceByDatePeriodRaw(
      requestParameters,
      initOverrides,
    );
  }
}

/**
 * @export
 */
export const GetFoodsByDateRangeResourcePathEnum = {
  CaloriesIn: "caloriesIn",
  Water: "water",
} as const;
export type GetFoodsByDateRangeResourcePathEnum =
  (typeof GetFoodsByDateRangeResourcePathEnum)[keyof typeof GetFoodsByDateRangeResourcePathEnum];
/**
 * @export
 */
export const GetFoodsResourceByDatePeriodResourcePathEnum = {
  CaloriesIn: "caloriesIn",
  Water: "water",
} as const;
export type GetFoodsResourceByDatePeriodResourcePathEnum =
  (typeof GetFoodsResourceByDatePeriodResourcePathEnum)[keyof typeof GetFoodsResourceByDatePeriodResourcePathEnum];
