/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface AddSleepRequest {
  startTime: string;
  duration: number;
  date: Date;
}

export interface DeleteSleepRequest {
  logId: string;
}

export interface GetSleepByDateRequest {
  date: Date;
}

export interface GetSleepByDateRangeRequest {
  baseDate: Date;
  endDate: Date;
}

export interface GetSleepListRequest {
  sort: string;
  offset: number;
  limit: number;
  beforeDate?: Date;
  afterDate?: Date;
}

export interface UpdateSleepGoalRequest {
  minDuration: string;
}

/**
 *
 */
export class SleepApi extends runtime.BaseAPI {
  /**
   * Creates a log entry for a sleep event and returns a response in the format requested.
   * Log Sleep
   */
  async addSleepRaw(
    requestParameters: AddSleepRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.startTime === null ||
      requestParameters.startTime === undefined
    ) {
      throw new runtime.RequiredError(
        "startTime",
        "Required parameter requestParameters.startTime was null or undefined when calling addSleep.",
      );
    }

    if (
      requestParameters.duration === null ||
      requestParameters.duration === undefined
    ) {
      throw new runtime.RequiredError(
        "duration",
        "Required parameter requestParameters.duration was null or undefined when calling addSleep.",
      );
    }

    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling addSleep.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.startTime !== undefined) {
      queryParameters["startTime"] = requestParameters.startTime;
    }

    if (requestParameters.duration !== undefined) {
      queryParameters["duration"] = requestParameters.duration;
    }

    if (requestParameters.date !== undefined) {
      queryParameters["date"] = (requestParameters.date as any)
        .toISOString()
        .substring(0, 10);
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1.2/user/-/sleep.json`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Creates a log entry for a sleep event and returns a response in the format requested.
   * Log Sleep
   */
  async addSleep(
    requestParameters: AddSleepRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.addSleepRaw(requestParameters, initOverrides);
  }

  /**
   * Deletes a user\'s sleep log entry with the given ID.
   * Delete Sleep Log
   */
  async deleteSleepRaw(
    requestParameters: DeleteSleepRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.logId === null ||
      requestParameters.logId === undefined
    ) {
      throw new runtime.RequiredError(
        "logId",
        "Required parameter requestParameters.logId was null or undefined when calling deleteSleep.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1.2/user/-/sleep/{log-id}.json`.replace(
          `{${"log-id"}}`,
          encodeURIComponent(String(requestParameters.logId)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes a user\'s sleep log entry with the given ID.
   * Delete Sleep Log
   */
  async deleteSleep(
    requestParameters: DeleteSleepRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteSleepRaw(requestParameters, initOverrides);
  }

  /**
   * The Get Sleep Logs by Date endpoint returns a summary and list of a user\'s sleep log entries (including naps) as well as detailed sleep entry data for a given day.
   * Get Sleep Log
   */
  async getSleepByDateRaw(
    requestParameters: GetSleepByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getSleepByDate.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1.2/user/-/sleep/date/{date}.json`.replace(
          `{${"date"}}`,
          encodeURIComponent(String(requestParameters.date)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * The Get Sleep Logs by Date endpoint returns a summary and list of a user\'s sleep log entries (including naps) as well as detailed sleep entry data for a given day.
   * Get Sleep Log
   */
  async getSleepByDate(
    requestParameters: GetSleepByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getSleepByDateRaw(requestParameters, initOverrides);
  }

  /**
   * The Get Sleep Logs by Date Range endpoint returns a list of a user\'s sleep log entries (including naps) as well as detailed sleep entry data for a given date range (inclusive of start and end dates).
   * Get Sleep Logs by Date Range
   */
  async getSleepByDateRangeRaw(
    requestParameters: GetSleepByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.baseDate === null ||
      requestParameters.baseDate === undefined
    ) {
      throw new runtime.RequiredError(
        "baseDate",
        "Required parameter requestParameters.baseDate was null or undefined when calling getSleepByDateRange.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getSleepByDateRange.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1.2/user/-/sleep/date/{base-date}/{end-date}.json`
          .replace(
            `{${"base-date"}}`,
            encodeURIComponent(String(requestParameters.baseDate)),
          )
          .replace(
            `{${"end-date"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * The Get Sleep Logs by Date Range endpoint returns a list of a user\'s sleep log entries (including naps) as well as detailed sleep entry data for a given date range (inclusive of start and end dates).
   * Get Sleep Logs by Date Range
   */
  async getSleepByDateRange(
    requestParameters: GetSleepByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getSleepByDateRangeRaw(requestParameters, initOverrides);
  }

  /**
   * Returns the user\'s sleep goal.
   * Get Sleep Goal
   */
  async getSleepGoalRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1.2/user/-/sleep/goal.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the user\'s sleep goal.
   * Get Sleep Goal
   */
  async getSleepGoal(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getSleepGoalRaw(initOverrides);
  }

  /**
   * The Get Sleep Logs List endpoint returns a list of a user\'s sleep logs (including naps) before or after a given day with offset, limit, and sort order.
   * Get Sleep Logs List
   */
  async getSleepListRaw(
    requestParameters: GetSleepListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.sort === null ||
      requestParameters.sort === undefined
    ) {
      throw new runtime.RequiredError(
        "sort",
        "Required parameter requestParameters.sort was null or undefined when calling getSleepList.",
      );
    }

    if (
      requestParameters.offset === null ||
      requestParameters.offset === undefined
    ) {
      throw new runtime.RequiredError(
        "offset",
        "Required parameter requestParameters.offset was null or undefined when calling getSleepList.",
      );
    }

    if (
      requestParameters.limit === null ||
      requestParameters.limit === undefined
    ) {
      throw new runtime.RequiredError(
        "limit",
        "Required parameter requestParameters.limit was null or undefined when calling getSleepList.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.beforeDate !== undefined) {
      queryParameters["beforeDate"] = (requestParameters.beforeDate as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters.afterDate !== undefined) {
      queryParameters["afterDate"] = (requestParameters.afterDate as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters.sort !== undefined) {
      queryParameters["sort"] = requestParameters.sort;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1.2/user/-/sleep/list.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * The Get Sleep Logs List endpoint returns a list of a user\'s sleep logs (including naps) before or after a given day with offset, limit, and sort order.
   * Get Sleep Logs List
   */
  async getSleepList(
    requestParameters: GetSleepListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getSleepListRaw(requestParameters, initOverrides);
  }

  /**
   * Create or update the user\'s sleep goal and get a response in the JSON format.
   * Update Sleep Goal
   */
  async updateSleepGoalRaw(
    requestParameters: UpdateSleepGoalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.minDuration === null ||
      requestParameters.minDuration === undefined
    ) {
      throw new runtime.RequiredError(
        "minDuration",
        "Required parameter requestParameters.minDuration was null or undefined when calling updateSleepGoal.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.minDuration !== undefined) {
      queryParameters["minDuration"] = requestParameters.minDuration;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1.2/user/-/sleep/goal.json`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Create or update the user\'s sleep goal and get a response in the JSON format.
   * Update Sleep Goal
   */
  async updateSleepGoal(
    requestParameters: UpdateSleepGoalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.updateSleepGoalRaw(requestParameters, initOverrides);
  }
}
