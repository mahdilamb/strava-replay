/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SummaryAthlete } from "./SummaryAthlete";
import {
  SummaryAthleteFromJSON,
  SummaryAthleteFromJSONTyped,
  SummaryAthleteToJSON,
  SummaryAthleteToJSONTyped,
} from "./SummaryAthlete";
import type { Waypoint } from "./Waypoint";
import {
  WaypointFromJSON,
  WaypointFromJSONTyped,
  WaypointToJSON,
  WaypointToJSONTyped,
} from "./Waypoint";
import type { PolylineMap } from "./PolylineMap";
import {
  PolylineMapFromJSON,
  PolylineMapFromJSONTyped,
  PolylineMapToJSON,
  PolylineMapToJSONTyped,
} from "./PolylineMap";
import type { SummarySegment } from "./SummarySegment";
import {
  SummarySegmentFromJSON,
  SummarySegmentFromJSONTyped,
  SummarySegmentToJSON,
  SummarySegmentToJSONTyped,
} from "./SummarySegment";

/**
 *
 * @export
 * @interface Route
 */
export interface Route {
  /**
   *
   * @type {SummaryAthlete}
   * @memberof Route
   */
  athlete?: SummaryAthlete;
  /**
   * The description of the route
   * @type {string}
   * @memberof Route
   */
  description?: string;
  /**
   * The route's distance, in meters
   * @type {number}
   * @memberof Route
   */
  distance?: number;
  /**
   * The route's elevation gain.
   * @type {number}
   * @memberof Route
   */
  elevationGain?: number;
  /**
   * The unique identifier of this route
   * @type {number}
   * @memberof Route
   */
  id?: number;
  /**
   * The unique identifier of the route in string format
   * @type {string}
   * @memberof Route
   */
  idStr?: string;
  /**
   *
   * @type {PolylineMap}
   * @memberof Route
   */
  map?: PolylineMap;
  /**
   * The name of this route
   * @type {string}
   * @memberof Route
   */
  name?: string;
  /**
   * Whether this route is private
   * @type {boolean}
   * @memberof Route
   */
  _private?: boolean;
  /**
   * Whether this route is starred by the logged-in athlete
   * @type {boolean}
   * @memberof Route
   */
  starred?: boolean;
  /**
   * An epoch timestamp of when the route was created
   * @type {number}
   * @memberof Route
   */
  timestamp?: number;
  /**
   * This route's type (1 for ride, 2 for runs)
   * @type {number}
   * @memberof Route
   */
  type?: number;
  /**
   * This route's sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)
   * @type {number}
   * @memberof Route
   */
  subType?: number;
  /**
   * The time at which the route was created
   * @type {Date}
   * @memberof Route
   */
  createdAt?: Date;
  /**
   * The time at which the route was last updated
   * @type {Date}
   * @memberof Route
   */
  updatedAt?: Date;
  /**
   * Estimated time in seconds for the authenticated athlete to complete route
   * @type {number}
   * @memberof Route
   */
  estimatedMovingTime?: number;
  /**
   * The segments traversed by this route
   * @type {Array<SummarySegment>}
   * @memberof Route
   */
  segments?: Array<SummarySegment>;
  /**
   * The custom waypoints along this route
   * @type {Array<Waypoint>}
   * @memberof Route
   */
  waypoints?: Array<Waypoint>;
}

/**
 * Check if a given object implements the Route interface.
 */
export function instanceOfRoute(value: object): value is Route {
  return true;
}

export function RouteFromJSON(json: any): Route {
  return RouteFromJSONTyped(json, false);
}

export function RouteFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Route {
  if (json == null) {
    return json;
  }
  return {
    athlete:
      json["athlete"] == null
        ? undefined
        : SummaryAthleteFromJSON(json["athlete"]),
    description: json["description"] == null ? undefined : json["description"],
    distance: json["distance"] == null ? undefined : json["distance"],
    elevationGain:
      json["elevation_gain"] == null ? undefined : json["elevation_gain"],
    id: json["id"] == null ? undefined : json["id"],
    idStr: json["id_str"] == null ? undefined : json["id_str"],
    map: json["map"] == null ? undefined : PolylineMapFromJSON(json["map"]),
    name: json["name"] == null ? undefined : json["name"],
    _private: json["private"] == null ? undefined : json["private"],
    starred: json["starred"] == null ? undefined : json["starred"],
    timestamp: json["timestamp"] == null ? undefined : json["timestamp"],
    type: json["type"] == null ? undefined : json["type"],
    subType: json["sub_type"] == null ? undefined : json["sub_type"],
    createdAt:
      json["created_at"] == null ? undefined : new Date(json["created_at"]),
    updatedAt:
      json["updated_at"] == null ? undefined : new Date(json["updated_at"]),
    estimatedMovingTime:
      json["estimated_moving_time"] == null
        ? undefined
        : json["estimated_moving_time"],
    segments:
      json["segments"] == null
        ? undefined
        : (json["segments"] as Array<any>).map(SummarySegmentFromJSON),
    waypoints:
      json["waypoints"] == null
        ? undefined
        : (json["waypoints"] as Array<any>).map(WaypointFromJSON),
  };
}

export function RouteToJSON(json: any): Route {
  return RouteToJSONTyped(json, false);
}

export function RouteToJSONTyped(
  value?: Route | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    athlete: SummaryAthleteToJSON(value["athlete"]),
    description: value["description"],
    distance: value["distance"],
    elevation_gain: value["elevationGain"],
    id: value["id"],
    id_str: value["idStr"],
    map: PolylineMapToJSON(value["map"]),
    name: value["name"],
    private: value["_private"],
    starred: value["starred"],
    timestamp: value["timestamp"],
    type: value["type"],
    sub_type: value["subType"],
    created_at:
      value["createdAt"] == null ? undefined : value["createdAt"].toISOString(),
    updated_at:
      value["updatedAt"] == null ? undefined : value["updatedAt"].toISOString(),
    estimated_moving_time: value["estimatedMovingTime"],
    segments:
      value["segments"] == null
        ? undefined
        : (value["segments"] as Array<any>).map(SummarySegmentToJSON),
    waypoints:
      value["waypoints"] == null
        ? undefined
        : (value["waypoints"] as Array<any>).map(WaypointToJSON),
  };
}
