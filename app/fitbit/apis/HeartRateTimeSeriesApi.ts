/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface GetHeartByDatePeriodRequest {
  date: Date;
  period: string;
}

export interface GetHeartByDateRangeRequest {
  baseDate: string;
  endDate: Date;
}

/**
 *
 */
export class HeartRateTimeSeriesApi extends runtime.BaseAPI {
  /**
   * Returns the time series data in the specified range for a given resource in the format requested using units in the unit systems that corresponds to the Accept-Language header provided.
   * Get Heart Rate Time Series
   */
  async getHeartByDatePeriodRaw(
    requestParameters: GetHeartByDatePeriodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getHeartByDatePeriod.",
      );
    }

    if (
      requestParameters.period === null ||
      requestParameters.period === undefined
    ) {
      throw new runtime.RequiredError(
        "period",
        "Required parameter requestParameters.period was null or undefined when calling getHeartByDatePeriod.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/heart/date/{date}/{period}.json`
          .replace(
            `{${"date"}}`,
            encodeURIComponent(String(requestParameters.date)),
          )
          .replace(
            `{${"period"}}`,
            encodeURIComponent(String(requestParameters.period)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the time series data in the specified range for a given resource in the format requested using units in the unit systems that corresponds to the Accept-Language header provided.
   * Get Heart Rate Time Series
   */
  async getHeartByDatePeriod(
    requestParameters: GetHeartByDatePeriodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getHeartByDatePeriodRaw(requestParameters, initOverrides);
  }

  /**
   * Returns the time series data in the specified range for a given resource in the format requested using units in the unit systems that corresponds to the Accept-Language header provided.
   * Get Heart Rate Time Series
   */
  async getHeartByDateRangeRaw(
    requestParameters: GetHeartByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.baseDate === null ||
      requestParameters.baseDate === undefined
    ) {
      throw new runtime.RequiredError(
        "baseDate",
        "Required parameter requestParameters.baseDate was null or undefined when calling getHeartByDateRange.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getHeartByDateRange.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/activities/heart/date/{base-date}/{end-date}.json`
          .replace(
            `{${"base-date"}}`,
            encodeURIComponent(String(requestParameters.baseDate)),
          )
          .replace(
            `{${"end-date"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns the time series data in the specified range for a given resource in the format requested using units in the unit systems that corresponds to the Accept-Language header provided.
   * Get Heart Rate Time Series
   */
  async getHeartByDateRange(
    requestParameters: GetHeartByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getHeartByDateRangeRaw(requestParameters, initOverrides);
  }
}
