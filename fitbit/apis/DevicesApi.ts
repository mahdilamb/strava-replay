/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface AddAlarmsRequest {
  trackerId: number;
  time: string;
  enabled: boolean;
  recurring: string;
  weekDays: string;
}

export interface DeleteAlarmsRequest {
  trackerId: number;
  alarmId: number;
}

export interface GetAlarmsRequest {
  trackerId: number;
}

export interface UpdateAlarmsRequest {
  trackerId: number;
  alarmId: number;
  time: string;
  enabled: boolean;
  recurring: string;
  weekDays: string;
  snoozeLength: number;
  snoozeCount: number;
}

/**
 *
 */
export class DevicesApi extends runtime.BaseAPI {
  /**
   * Adds the alarm settings to a given ID for a given device.
   * Add Alarm
   */
  async addAlarmsRaw(
    requestParameters: AddAlarmsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.trackerId === null ||
      requestParameters.trackerId === undefined
    ) {
      throw new runtime.RequiredError(
        "trackerId",
        "Required parameter requestParameters.trackerId was null or undefined when calling addAlarms.",
      );
    }

    if (
      requestParameters.time === null ||
      requestParameters.time === undefined
    ) {
      throw new runtime.RequiredError(
        "time",
        "Required parameter requestParameters.time was null or undefined when calling addAlarms.",
      );
    }

    if (
      requestParameters.enabled === null ||
      requestParameters.enabled === undefined
    ) {
      throw new runtime.RequiredError(
        "enabled",
        "Required parameter requestParameters.enabled was null or undefined when calling addAlarms.",
      );
    }

    if (
      requestParameters.recurring === null ||
      requestParameters.recurring === undefined
    ) {
      throw new runtime.RequiredError(
        "recurring",
        "Required parameter requestParameters.recurring was null or undefined when calling addAlarms.",
      );
    }

    if (
      requestParameters.weekDays === null ||
      requestParameters.weekDays === undefined
    ) {
      throw new runtime.RequiredError(
        "weekDays",
        "Required parameter requestParameters.weekDays was null or undefined when calling addAlarms.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.time !== undefined) {
      queryParameters["time"] = requestParameters.time;
    }

    if (requestParameters.enabled !== undefined) {
      queryParameters["enabled"] = requestParameters.enabled;
    }

    if (requestParameters.recurring !== undefined) {
      queryParameters["recurring"] = requestParameters.recurring;
    }

    if (requestParameters.weekDays !== undefined) {
      queryParameters["weekDays"] = requestParameters.weekDays;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/devices/tracker/{tracker-id}/alarms.json`.replace(
          `{${"tracker-id"}}`,
          encodeURIComponent(String(requestParameters.trackerId)),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Adds the alarm settings to a given ID for a given device.
   * Add Alarm
   */
  async addAlarms(
    requestParameters: AddAlarmsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.addAlarmsRaw(requestParameters, initOverrides);
  }

  /**
   * Deletes the user\'s device alarm entry with the given ID for a given device.
   * Delete Alarm
   */
  async deleteAlarmsRaw(
    requestParameters: DeleteAlarmsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.trackerId === null ||
      requestParameters.trackerId === undefined
    ) {
      throw new runtime.RequiredError(
        "trackerId",
        "Required parameter requestParameters.trackerId was null or undefined when calling deleteAlarms.",
      );
    }

    if (
      requestParameters.alarmId === null ||
      requestParameters.alarmId === undefined
    ) {
      throw new runtime.RequiredError(
        "alarmId",
        "Required parameter requestParameters.alarmId was null or undefined when calling deleteAlarms.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/devices/tracker/{tracker-id}/alarms/{alarm-id}.json`
          .replace(
            `{${"tracker-id"}}`,
            encodeURIComponent(String(requestParameters.trackerId)),
          )
          .replace(
            `{${"alarm-id"}}`,
            encodeURIComponent(String(requestParameters.alarmId)),
          ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes the user\'s device alarm entry with the given ID for a given device.
   * Delete Alarm
   */
  async deleteAlarms(
    requestParameters: DeleteAlarmsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteAlarmsRaw(requestParameters, initOverrides);
  }

  /**
   * Returns alarms for a device
   * Get Alarms
   */
  async getAlarmsRaw(
    requestParameters: GetAlarmsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.trackerId === null ||
      requestParameters.trackerId === undefined
    ) {
      throw new runtime.RequiredError(
        "trackerId",
        "Required parameter requestParameters.trackerId was null or undefined when calling getAlarms.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/devices/tracker/{tracker-id}/alarms.json`.replace(
          `{${"tracker-id"}}`,
          encodeURIComponent(String(requestParameters.trackerId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns alarms for a device
   * Get Alarms
   */
  async getAlarms(
    requestParameters: GetAlarmsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getAlarmsRaw(requestParameters, initOverrides);
  }

  /**
   * Returns a list of the Fitbit devices connected to a user\'s account.
   * Get Devices
   */
  async getDevicesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/devices.json`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns a list of the Fitbit devices connected to a user\'s account.
   * Get Devices
   */
  async getDevices(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getDevicesRaw(initOverrides);
  }

  /**
   * Updates the alarm entry with a given ID for a given device. It also gets a response in the format requested.
   * Update Alarm
   */
  async updateAlarmsRaw(
    requestParameters: UpdateAlarmsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.trackerId === null ||
      requestParameters.trackerId === undefined
    ) {
      throw new runtime.RequiredError(
        "trackerId",
        "Required parameter requestParameters.trackerId was null or undefined when calling updateAlarms.",
      );
    }

    if (
      requestParameters.alarmId === null ||
      requestParameters.alarmId === undefined
    ) {
      throw new runtime.RequiredError(
        "alarmId",
        "Required parameter requestParameters.alarmId was null or undefined when calling updateAlarms.",
      );
    }

    if (
      requestParameters.time === null ||
      requestParameters.time === undefined
    ) {
      throw new runtime.RequiredError(
        "time",
        "Required parameter requestParameters.time was null or undefined when calling updateAlarms.",
      );
    }

    if (
      requestParameters.enabled === null ||
      requestParameters.enabled === undefined
    ) {
      throw new runtime.RequiredError(
        "enabled",
        "Required parameter requestParameters.enabled was null or undefined when calling updateAlarms.",
      );
    }

    if (
      requestParameters.recurring === null ||
      requestParameters.recurring === undefined
    ) {
      throw new runtime.RequiredError(
        "recurring",
        "Required parameter requestParameters.recurring was null or undefined when calling updateAlarms.",
      );
    }

    if (
      requestParameters.weekDays === null ||
      requestParameters.weekDays === undefined
    ) {
      throw new runtime.RequiredError(
        "weekDays",
        "Required parameter requestParameters.weekDays was null or undefined when calling updateAlarms.",
      );
    }

    if (
      requestParameters.snoozeLength === null ||
      requestParameters.snoozeLength === undefined
    ) {
      throw new runtime.RequiredError(
        "snoozeLength",
        "Required parameter requestParameters.snoozeLength was null or undefined when calling updateAlarms.",
      );
    }

    if (
      requestParameters.snoozeCount === null ||
      requestParameters.snoozeCount === undefined
    ) {
      throw new runtime.RequiredError(
        "snoozeCount",
        "Required parameter requestParameters.snoozeCount was null or undefined when calling updateAlarms.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.time !== undefined) {
      queryParameters["time"] = requestParameters.time;
    }

    if (requestParameters.enabled !== undefined) {
      queryParameters["enabled"] = requestParameters.enabled;
    }

    if (requestParameters.recurring !== undefined) {
      queryParameters["recurring"] = requestParameters.recurring;
    }

    if (requestParameters.weekDays !== undefined) {
      queryParameters["weekDays"] = requestParameters.weekDays;
    }

    if (requestParameters.snoozeLength !== undefined) {
      queryParameters["snoozeLength"] = requestParameters.snoozeLength;
    }

    if (requestParameters.snoozeCount !== undefined) {
      queryParameters["snoozeCount"] = requestParameters.snoozeCount;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/devices/tracker/{tracker-id}/alarms/{alarm-id}.json`
          .replace(
            `{${"tracker-id"}}`,
            encodeURIComponent(String(requestParameters.trackerId)),
          )
          .replace(
            `{${"alarm-id"}}`,
            encodeURIComponent(String(requestParameters.alarmId)),
          ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates the alarm entry with a given ID for a given device. It also gets a response in the format requested.
   * Update Alarm
   */
  async updateAlarms(
    requestParameters: UpdateAlarmsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.updateAlarmsRaw(requestParameters, initOverrides);
  }
}
