/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 *
 * @export
 * @interface Split
 */
export interface Split {
  /**
   * The average speed of this split, in meters per second
   * @type {number}
   * @memberof Split
   */
  averageSpeed?: number;
  /**
   * The distance of this split, in meters
   * @type {number}
   * @memberof Split
   */
  distance?: number;
  /**
   * The elapsed time of this split, in seconds
   * @type {number}
   * @memberof Split
   */
  elapsedTime?: number;
  /**
   * The elevation difference of this split, in meters
   * @type {number}
   * @memberof Split
   */
  elevationDifference?: number;
  /**
   * The pacing zone of this split
   * @type {number}
   * @memberof Split
   */
  paceZone?: number;
  /**
   * The moving time of this split, in seconds
   * @type {number}
   * @memberof Split
   */
  movingTime?: number;
  /**
   * N/A
   * @type {number}
   * @memberof Split
   */
  split?: number;
}

/**
 * Check if a given object implements the Split interface.
 */
export function instanceOfSplit(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function SplitFromJSON(json: any): Split {
  return SplitFromJSONTyped(json, false);
}

export function SplitFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Split {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    averageSpeed: !exists(json, "average_speed")
      ? undefined
      : json["average_speed"],
    distance: !exists(json, "distance") ? undefined : json["distance"],
    elapsedTime: !exists(json, "elapsed_time")
      ? undefined
      : json["elapsed_time"],
    elevationDifference: !exists(json, "elevation_difference")
      ? undefined
      : json["elevation_difference"],
    paceZone: !exists(json, "pace_zone") ? undefined : json["pace_zone"],
    movingTime: !exists(json, "moving_time") ? undefined : json["moving_time"],
    split: !exists(json, "split") ? undefined : json["split"],
  };
}

export function SplitToJSON(value?: Split | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    average_speed: value.averageSpeed,
    distance: value.distance,
    elapsed_time: value.elapsedTime,
    elevation_difference: value.elevationDifference,
    pace_zone: value.paceZone,
    moving_time: value.movingTime,
    split: value.split,
  };
}
