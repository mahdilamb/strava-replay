/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface GetBodyResourceByDatePeriodRequest {
  resourcePath: GetBodyResourceByDatePeriodResourcePathEnum;
  date: Date;
  period: string;
}

export interface GetBodyResourceByDateRangeRequest {
  resourcePath: GetBodyResourceByDateRangeResourcePathEnum;
  baseDate: Date;
  endDate: Date;
}

/**
 *
 */
export class BodyTimeSeriesApi extends runtime.BaseAPI {
  /**
   * Returns time series data in the specified range for a given resource in the format requested using units in the unit system that corresponds to the Accept-Language header provided.
   * Get Body Time Series
   */
  async getBodyResourceByDatePeriodRaw(
    requestParameters: GetBodyResourceByDatePeriodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.resourcePath === null ||
      requestParameters.resourcePath === undefined
    ) {
      throw new runtime.RequiredError(
        "resourcePath",
        "Required parameter requestParameters.resourcePath was null or undefined when calling getBodyResourceByDatePeriod.",
      );
    }

    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getBodyResourceByDatePeriod.",
      );
    }

    if (
      requestParameters.period === null ||
      requestParameters.period === undefined
    ) {
      throw new runtime.RequiredError(
        "period",
        "Required parameter requestParameters.period was null or undefined when calling getBodyResourceByDatePeriod.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/body/{resource-path}/date/{date}/{period}.json`
          .replace(
            `{${"resource-path"}}`,
            encodeURIComponent(String(requestParameters.resourcePath)),
          )
          .replace(
            `{${"date"}}`,
            encodeURIComponent(String(requestParameters.date)),
          )
          .replace(
            `{${"period"}}`,
            encodeURIComponent(String(requestParameters.period)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns time series data in the specified range for a given resource in the format requested using units in the unit system that corresponds to the Accept-Language header provided.
   * Get Body Time Series
   */
  async getBodyResourceByDatePeriod(
    requestParameters: GetBodyResourceByDatePeriodRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getBodyResourceByDatePeriodRaw(requestParameters, initOverrides);
  }

  /**
   * Returns time series data in the specified range for a given resource in the format requested using units in the unit system that corresponds to the Accept-Language header provided.
   * Get Body Time Series
   */
  async getBodyResourceByDateRangeRaw(
    requestParameters: GetBodyResourceByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.resourcePath === null ||
      requestParameters.resourcePath === undefined
    ) {
      throw new runtime.RequiredError(
        "resourcePath",
        "Required parameter requestParameters.resourcePath was null or undefined when calling getBodyResourceByDateRange.",
      );
    }

    if (
      requestParameters.baseDate === null ||
      requestParameters.baseDate === undefined
    ) {
      throw new runtime.RequiredError(
        "baseDate",
        "Required parameter requestParameters.baseDate was null or undefined when calling getBodyResourceByDateRange.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getBodyResourceByDateRange.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/body/{resource-path}/date/{base-date}/{end-date}.json`
          .replace(
            `{${"resource-path"}}`,
            encodeURIComponent(String(requestParameters.resourcePath)),
          )
          .replace(
            `{${"base-date"}}`,
            encodeURIComponent(String(requestParameters.baseDate)),
          )
          .replace(
            `{${"end-date"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns time series data in the specified range for a given resource in the format requested using units in the unit system that corresponds to the Accept-Language header provided.
   * Get Body Time Series
   */
  async getBodyResourceByDateRange(
    requestParameters: GetBodyResourceByDateRangeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getBodyResourceByDateRangeRaw(requestParameters, initOverrides);
  }
}

/**
 * @export
 */
export const GetBodyResourceByDatePeriodResourcePathEnum = {
  Bmi: "bmi",
  Fat: "fat",
  Weight: "weight",
} as const;
export type GetBodyResourceByDatePeriodResourcePathEnum =
  (typeof GetBodyResourceByDatePeriodResourcePathEnum)[keyof typeof GetBodyResourceByDatePeriodResourcePathEnum];
/**
 * @export
 */
export const GetBodyResourceByDateRangeResourcePathEnum = {
  Bmi: "bmi",
  Fat: "fat",
  Weight: "weight",
} as const;
export type GetBodyResourceByDateRangeResourcePathEnum =
  (typeof GetBodyResourceByDateRangeResourcePathEnum)[keyof typeof GetBodyResourceByDateRangeResourcePathEnum];
