/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  DetailedSegment,
  ExplorerResponse,
  Fault,
  SummarySegment,
} from "../models/index";
import {
  DetailedSegmentFromJSON,
  DetailedSegmentToJSON,
  ExplorerResponseFromJSON,
  ExplorerResponseToJSON,
  FaultFromJSON,
  FaultToJSON,
  SummarySegmentFromJSON,
  SummarySegmentToJSON,
} from "../models/index";

export interface ExploreSegmentsRequest {
  bounds: Array<number>;
  activityType?: ExploreSegmentsActivityTypeEnum;
  minCat?: number;
  maxCat?: number;
}

export interface GetLoggedInAthleteStarredSegmentsRequest {
  page?: number;
  perPage?: number;
}

export interface GetSegmentByIdRequest {
  id: number;
}

export interface StarSegmentRequest {
  id: number;
  starred: boolean;
}

/**
 *
 */
export class SegmentsApi extends runtime.BaseAPI {
  /**
   * Returns the top 10 segments matching a specified query.
   * Explore segments
   */
  async exploreSegmentsRaw(
    requestParameters: ExploreSegmentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ExplorerResponse>> {
    if (requestParameters["bounds"] == null) {
      throw new runtime.RequiredError(
        "bounds",
        'Required parameter "bounds" was null or undefined when calling exploreSegments().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["bounds"] != null) {
      queryParameters["bounds"] = requestParameters["bounds"]!.join(
        runtime.COLLECTION_FORMATS["csv"],
      );
    }

    if (requestParameters["activityType"] != null) {
      queryParameters["activity_type"] = requestParameters["activityType"];
    }

    if (requestParameters["minCat"] != null) {
      queryParameters["min_cat"] = requestParameters["minCat"];
    }

    if (requestParameters["maxCat"] != null) {
      queryParameters["max_cat"] = requestParameters["maxCat"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/segments/explore`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ExplorerResponseFromJSON(jsonValue),
    );
  }

  /**
   * Returns the top 10 segments matching a specified query.
   * Explore segments
   */
  async exploreSegments(
    requestParameters: ExploreSegmentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ExplorerResponse> {
    const response = await this.exploreSegmentsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List of the authenticated athlete\'s starred segments. Private segments are filtered out unless requested by a token with read_all scope.
   * List Starred Segments
   */
  async getLoggedInAthleteStarredSegmentsRaw(
    requestParameters: GetLoggedInAthleteStarredSegmentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<SummarySegment>>> {
    const queryParameters: any = {};

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["perPage"] != null) {
      queryParameters["per_page"] = requestParameters["perPage"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/segments/starred`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(SummarySegmentFromJSON),
    );
  }

  /**
   * List of the authenticated athlete\'s starred segments. Private segments are filtered out unless requested by a token with read_all scope.
   * List Starred Segments
   */
  async getLoggedInAthleteStarredSegments(
    requestParameters: GetLoggedInAthleteStarredSegmentsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<SummarySegment>> {
    const response = await this.getLoggedInAthleteStarredSegmentsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
   * Get Segment
   */
  async getSegmentByIdRaw(
    requestParameters: GetSegmentByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DetailedSegment>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getSegmentById().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/segments/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DetailedSegmentFromJSON(jsonValue),
    );
  }

  /**
   * Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
   * Get Segment
   */
  async getSegmentById(
    requestParameters: GetSegmentByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DetailedSegment> {
    const response = await this.getSegmentByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
   * Star Segment
   */
  async starSegmentRaw(
    requestParameters: StarSegmentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DetailedSegment>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling starSegment().',
      );
    }

    if (requestParameters["starred"] == null) {
      throw new runtime.RequiredError(
        "starred",
        'Required parameter "starred" was null or undefined when calling starSegment().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "strava_oauth",
        [],
      );
    }

    const consumes: runtime.Consume[] = [
      { contentType: "multipart/form-data" },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters["starred"] != null) {
      formParams.append("starred", requestParameters["starred"] as any);
    }

    const response = await this.request(
      {
        path: `/segments/{id}/starred`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DetailedSegmentFromJSON(jsonValue),
    );
  }

  /**
   * Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
   * Star Segment
   */
  async starSegment(
    requestParameters: StarSegmentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DetailedSegment> {
    const response = await this.starSegmentRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}

/**
 * @export
 */
export const ExploreSegmentsActivityTypeEnum = {
  Running: "running",
  Riding: "riding",
} as const;
export type ExploreSegmentsActivityTypeEnum =
  (typeof ExploreSegmentsActivityTypeEnum)[keyof typeof ExploreSegmentsActivityTypeEnum];
