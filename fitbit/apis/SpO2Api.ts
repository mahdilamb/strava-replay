/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface GetSpO2SummaryByDateRequest {
  date: Date;
}

export interface GetSpO2SummaryByIntervalRequest {
  startDate: Date;
  endDate: Date;
}

/**
 *
 */
export class SpO2Api extends runtime.BaseAPI {
  /**
   * This endpoint returns the SpO2 summary data for a single date. SpO2 applies specifically to a user’s “main sleep”, which is the longest single period of time asleep on a given date.
   * Get SpO2 Summary by Date
   */
  async getSpO2SummaryByDateRaw(
    requestParameters: GetSpO2SummaryByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new runtime.RequiredError(
        "date",
        "Required parameter requestParameters.date was null or undefined when calling getSpO2SummaryByDate.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["oxygen_saturation"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/spo2/date/{date}.json`.replace(
          `{${"date"}}`,
          encodeURIComponent(String(requestParameters.date)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * This endpoint returns the SpO2 summary data for a single date. SpO2 applies specifically to a user’s “main sleep”, which is the longest single period of time asleep on a given date.
   * Get SpO2 Summary by Date
   */
  async getSpO2SummaryByDate(
    requestParameters: GetSpO2SummaryByDateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getSpO2SummaryByDateRaw(requestParameters, initOverrides);
  }

  /**
   * This endpoint returns the SpO2 summary data for a date range. SpO2 applies specifically to a user’s “main sleep”, which is the longest single period of time asleep on a given date.
   * Get SpO2 Summary by Interval
   */
  async getSpO2SummaryByIntervalRaw(
    requestParameters: GetSpO2SummaryByIntervalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.startDate === null ||
      requestParameters.startDate === undefined
    ) {
      throw new runtime.RequiredError(
        "startDate",
        "Required parameter requestParameters.startDate was null or undefined when calling getSpO2SummaryByInterval.",
      );
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling getSpO2SummaryByInterval.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        ["oxygen_saturation"],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/spo2/date/{startDate}/{endDate}.json`
          .replace(
            `{${"startDate"}}`,
            encodeURIComponent(String(requestParameters.startDate)),
          )
          .replace(
            `{${"endDate"}}`,
            encodeURIComponent(String(requestParameters.endDate)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * This endpoint returns the SpO2 summary data for a date range. SpO2 applies specifically to a user’s “main sleep”, which is the longest single period of time asleep on a given date.
   * Get SpO2 Summary by Interval
   */
  async getSpO2SummaryByInterval(
    requestParameters: GetSpO2SummaryByIntervalRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getSpO2SummaryByIntervalRaw(requestParameters, initOverrides);
  }
}
