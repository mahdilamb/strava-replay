/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { FoodItem } from "./FoodItem";
import {
  FoodItemFromJSON,
  FoodItemFromJSONTyped,
  FoodItemToJSON,
} from "./FoodItem";

/**
 *
 * @export
 * @interface Meal
 */
export interface Meal {
  /**
   *
   * @type {string}
   * @memberof Meal
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Meal
   */
  description?: string;
  /**
   *
   * @type {Array<FoodItem>}
   * @memberof Meal
   */
  mealFoods?: Array<FoodItem>;
}

/**
 * Check if a given object implements the Meal interface.
 */
export function instanceOfMeal(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function MealFromJSON(json: any): Meal {
  return MealFromJSONTyped(json, false);
}

export function MealFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Meal {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: !exists(json, "name") ? undefined : json["name"],
    description: !exists(json, "description") ? undefined : json["description"],
    mealFoods: !exists(json, "mealFoods")
      ? undefined
      : (json["mealFoods"] as Array<any>).map(FoodItemFromJSON),
  };
}

export function MealToJSON(value?: Meal | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    description: value.description,
    mealFoods:
      value.mealFoods === undefined
        ? undefined
        : (value.mealFoods as Array<any>).map(FoodItemToJSON),
  };
}
