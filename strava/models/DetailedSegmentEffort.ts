/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { MetaActivity } from "./MetaActivity";
import {
  MetaActivityFromJSON,
  MetaActivityFromJSONTyped,
  MetaActivityToJSON,
  MetaActivityToJSONTyped,
} from "./MetaActivity";
import type { MetaAthlete } from "./MetaAthlete";
import {
  MetaAthleteFromJSON,
  MetaAthleteFromJSONTyped,
  MetaAthleteToJSON,
  MetaAthleteToJSONTyped,
} from "./MetaAthlete";
import type { SummarySegment } from "./SummarySegment";
import {
  SummarySegmentFromJSON,
  SummarySegmentFromJSONTyped,
  SummarySegmentToJSON,
  SummarySegmentToJSONTyped,
} from "./SummarySegment";

/**
 *
 * @export
 * @interface DetailedSegmentEffort
 */
export interface DetailedSegmentEffort {
  /**
   * The unique identifier of this effort
   * @type {number}
   * @memberof DetailedSegmentEffort
   */
  id?: number;
  /**
   * The unique identifier of the activity related to this effort
   * @type {number}
   * @memberof DetailedSegmentEffort
   */
  activityId?: number;
  /**
   * The effort's elapsed time
   * @type {number}
   * @memberof DetailedSegmentEffort
   */
  elapsedTime?: number;
  /**
   * The time at which the effort was started.
   * @type {Date}
   * @memberof DetailedSegmentEffort
   */
  startDate?: Date;
  /**
   * The time at which the effort was started in the local timezone.
   * @type {Date}
   * @memberof DetailedSegmentEffort
   */
  startDateLocal?: Date;
  /**
   * The effort's distance in meters
   * @type {number}
   * @memberof DetailedSegmentEffort
   */
  distance?: number;
  /**
   * Whether this effort is the current best on the leaderboard
   * @type {boolean}
   * @memberof DetailedSegmentEffort
   */
  isKom?: boolean;
  /**
   * The name of the segment on which this effort was performed
   * @type {string}
   * @memberof DetailedSegmentEffort
   */
  name?: string;
  /**
   *
   * @type {MetaActivity}
   * @memberof DetailedSegmentEffort
   */
  activity?: MetaActivity;
  /**
   *
   * @type {MetaAthlete}
   * @memberof DetailedSegmentEffort
   */
  athlete?: MetaAthlete;
  /**
   * The effort's moving time
   * @type {number}
   * @memberof DetailedSegmentEffort
   */
  movingTime?: number;
  /**
   * The start index of this effort in its activity's stream
   * @type {number}
   * @memberof DetailedSegmentEffort
   */
  startIndex?: number;
  /**
   * The end index of this effort in its activity's stream
   * @type {number}
   * @memberof DetailedSegmentEffort
   */
  endIndex?: number;
  /**
   * The effort's average cadence
   * @type {number}
   * @memberof DetailedSegmentEffort
   */
  averageCadence?: number;
  /**
   * The average wattage of this effort
   * @type {number}
   * @memberof DetailedSegmentEffort
   */
  averageWatts?: number;
  /**
   * For riding efforts, whether the wattage was reported by a dedicated recording device
   * @type {boolean}
   * @memberof DetailedSegmentEffort
   */
  deviceWatts?: boolean;
  /**
   * The heart heart rate of the athlete during this effort
   * @type {number}
   * @memberof DetailedSegmentEffort
   */
  averageHeartrate?: number;
  /**
   * The maximum heart rate of the athlete during this effort
   * @type {number}
   * @memberof DetailedSegmentEffort
   */
  maxHeartrate?: number;
  /**
   *
   * @type {SummarySegment}
   * @memberof DetailedSegmentEffort
   */
  segment?: SummarySegment;
  /**
   * The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload
   * @type {number}
   * @memberof DetailedSegmentEffort
   */
  komRank?: number;
  /**
   * The rank of the effort on the athlete's leaderboard if it belongs in the top 3 at the time of upload
   * @type {number}
   * @memberof DetailedSegmentEffort
   */
  prRank?: number;
  /**
   * Whether this effort should be hidden when viewed within an activity
   * @type {boolean}
   * @memberof DetailedSegmentEffort
   */
  hidden?: boolean;
}

/**
 * Check if a given object implements the DetailedSegmentEffort interface.
 */
export function instanceOfDetailedSegmentEffort(
  value: object,
): value is DetailedSegmentEffort {
  return true;
}

export function DetailedSegmentEffortFromJSON(
  json: any,
): DetailedSegmentEffort {
  return DetailedSegmentEffortFromJSONTyped(json, false);
}

export function DetailedSegmentEffortFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): DetailedSegmentEffort {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"] == null ? undefined : json["id"],
    activityId: json["activity_id"] == null ? undefined : json["activity_id"],
    elapsedTime:
      json["elapsed_time"] == null ? undefined : json["elapsed_time"],
    startDate:
      json["start_date"] == null ? undefined : new Date(json["start_date"]),
    startDateLocal:
      json["start_date_local"] == null
        ? undefined
        : new Date(json["start_date_local"]),
    distance: json["distance"] == null ? undefined : json["distance"],
    isKom: json["is_kom"] == null ? undefined : json["is_kom"],
    name: json["name"] == null ? undefined : json["name"],
    activity:
      json["activity"] == null
        ? undefined
        : MetaActivityFromJSON(json["activity"]),
    athlete:
      json["athlete"] == null
        ? undefined
        : MetaAthleteFromJSON(json["athlete"]),
    movingTime: json["moving_time"] == null ? undefined : json["moving_time"],
    startIndex: json["start_index"] == null ? undefined : json["start_index"],
    endIndex: json["end_index"] == null ? undefined : json["end_index"],
    averageCadence:
      json["average_cadence"] == null ? undefined : json["average_cadence"],
    averageWatts:
      json["average_watts"] == null ? undefined : json["average_watts"],
    deviceWatts:
      json["device_watts"] == null ? undefined : json["device_watts"],
    averageHeartrate:
      json["average_heartrate"] == null ? undefined : json["average_heartrate"],
    maxHeartrate:
      json["max_heartrate"] == null ? undefined : json["max_heartrate"],
    segment:
      json["segment"] == null
        ? undefined
        : SummarySegmentFromJSON(json["segment"]),
    komRank: json["kom_rank"] == null ? undefined : json["kom_rank"],
    prRank: json["pr_rank"] == null ? undefined : json["pr_rank"],
    hidden: json["hidden"] == null ? undefined : json["hidden"],
  };
}

export function DetailedSegmentEffortToJSON(json: any): DetailedSegmentEffort {
  return DetailedSegmentEffortToJSONTyped(json, false);
}

export function DetailedSegmentEffortToJSONTyped(
  value?: DetailedSegmentEffort | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    activity_id: value["activityId"],
    elapsed_time: value["elapsedTime"],
    start_date:
      value["startDate"] == null ? undefined : value["startDate"].toISOString(),
    start_date_local:
      value["startDateLocal"] == null
        ? undefined
        : value["startDateLocal"].toISOString(),
    distance: value["distance"],
    is_kom: value["isKom"],
    name: value["name"],
    activity: MetaActivityToJSON(value["activity"]),
    athlete: MetaAthleteToJSON(value["athlete"]),
    moving_time: value["movingTime"],
    start_index: value["startIndex"],
    end_index: value["endIndex"],
    average_cadence: value["averageCadence"],
    average_watts: value["averageWatts"],
    device_watts: value["deviceWatts"],
    average_heartrate: value["averageHeartrate"],
    max_heartrate: value["maxHeartrate"],
    segment: SummarySegmentToJSON(value["segment"]),
    kom_rank: value["komRank"],
    pr_rank: value["prRank"],
    hidden: value["hidden"],
  };
}
