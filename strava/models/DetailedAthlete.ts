/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { SummaryClub } from "./SummaryClub";
import {
  SummaryClubFromJSON,
  SummaryClubFromJSONTyped,
  SummaryClubToJSON,
} from "./SummaryClub";
import type { SummaryGear } from "./SummaryGear";
import {
  SummaryGearFromJSON,
  SummaryGearFromJSONTyped,
  SummaryGearToJSON,
} from "./SummaryGear";

/**
 *
 * @export
 * @interface DetailedAthlete
 */
export interface DetailedAthlete {
  /**
   * The unique identifier of the athlete
   * @type {number}
   * @memberof DetailedAthlete
   */
  id?: number;
  /**
   * Resource state, indicates level of detail. Possible values: 1 -> "meta", 2 -> "summary", 3 -> "detail"
   * @type {number}
   * @memberof DetailedAthlete
   */
  resourceState?: number;
  /**
   * The athlete's first name.
   * @type {string}
   * @memberof DetailedAthlete
   */
  firstname?: string;
  /**
   * The athlete's last name.
   * @type {string}
   * @memberof DetailedAthlete
   */
  lastname?: string;
  /**
   * URL to a 62x62 pixel profile picture.
   * @type {string}
   * @memberof DetailedAthlete
   */
  profileMedium?: string;
  /**
   * URL to a 124x124 pixel profile picture.
   * @type {string}
   * @memberof DetailedAthlete
   */
  profile?: string;
  /**
   * The athlete's city.
   * @type {string}
   * @memberof DetailedAthlete
   */
  city?: string;
  /**
   * The athlete's state or geographical region.
   * @type {string}
   * @memberof DetailedAthlete
   */
  state?: string;
  /**
   * The athlete's country.
   * @type {string}
   * @memberof DetailedAthlete
   */
  country?: string;
  /**
   * The athlete's sex.
   * @type {string}
   * @memberof DetailedAthlete
   */
  sex?: DetailedAthleteSexEnum;
  /**
   * Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.
   * @type {boolean}
   * @memberof DetailedAthlete
   */
  premium?: boolean;
  /**
   * Whether the athlete has any Summit subscription.
   * @type {boolean}
   * @memberof DetailedAthlete
   */
  summit?: boolean;
  /**
   * The time at which the athlete was created.
   * @type {Date}
   * @memberof DetailedAthlete
   */
  createdAt?: Date;
  /**
   * The time at which the athlete was last updated.
   * @type {Date}
   * @memberof DetailedAthlete
   */
  updatedAt?: Date;
  /**
   * The athlete's follower count.
   * @type {number}
   * @memberof DetailedAthlete
   */
  followerCount?: number;
  /**
   * The athlete's friend count.
   * @type {number}
   * @memberof DetailedAthlete
   */
  friendCount?: number;
  /**
   * The athlete's preferred unit system.
   * @type {string}
   * @memberof DetailedAthlete
   */
  measurementPreference?: DetailedAthleteMeasurementPreferenceEnum;
  /**
   * The athlete's FTP (Functional Threshold Power).
   * @type {number}
   * @memberof DetailedAthlete
   */
  ftp?: number;
  /**
   * The athlete's weight.
   * @type {number}
   * @memberof DetailedAthlete
   */
  weight?: number;
  /**
   * The athlete's clubs.
   * @type {Array<SummaryClub>}
   * @memberof DetailedAthlete
   */
  clubs?: Array<SummaryClub>;
  /**
   * The athlete's bikes.
   * @type {Array<SummaryGear>}
   * @memberof DetailedAthlete
   */
  bikes?: Array<SummaryGear>;
  /**
   * The athlete's shoes.
   * @type {Array<SummaryGear>}
   * @memberof DetailedAthlete
   */
  shoes?: Array<SummaryGear>;
}

/**
 * @export
 */
export const DetailedAthleteSexEnum = {
  M: "M",
  F: "F",
} as const;
export type DetailedAthleteSexEnum =
  (typeof DetailedAthleteSexEnum)[keyof typeof DetailedAthleteSexEnum];

/**
 * @export
 */
export const DetailedAthleteMeasurementPreferenceEnum = {
  Feet: "feet",
  Meters: "meters",
} as const;
export type DetailedAthleteMeasurementPreferenceEnum =
  (typeof DetailedAthleteMeasurementPreferenceEnum)[keyof typeof DetailedAthleteMeasurementPreferenceEnum];

/**
 * Check if a given object implements the DetailedAthlete interface.
 */
export function instanceOfDetailedAthlete(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function DetailedAthleteFromJSON(json: any): DetailedAthlete {
  return DetailedAthleteFromJSONTyped(json, false);
}

export function DetailedAthleteFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): DetailedAthlete {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, "id") ? undefined : json["id"],
    resourceState: !exists(json, "resource_state")
      ? undefined
      : json["resource_state"],
    firstname: !exists(json, "firstname") ? undefined : json["firstname"],
    lastname: !exists(json, "lastname") ? undefined : json["lastname"],
    profileMedium: !exists(json, "profile_medium")
      ? undefined
      : json["profile_medium"],
    profile: !exists(json, "profile") ? undefined : json["profile"],
    city: !exists(json, "city") ? undefined : json["city"],
    state: !exists(json, "state") ? undefined : json["state"],
    country: !exists(json, "country") ? undefined : json["country"],
    sex: !exists(json, "sex") ? undefined : json["sex"],
    premium: !exists(json, "premium") ? undefined : json["premium"],
    summit: !exists(json, "summit") ? undefined : json["summit"],
    createdAt: !exists(json, "created_at")
      ? undefined
      : new Date(json["created_at"]),
    updatedAt: !exists(json, "updated_at")
      ? undefined
      : new Date(json["updated_at"]),
    followerCount: !exists(json, "follower_count")
      ? undefined
      : json["follower_count"],
    friendCount: !exists(json, "friend_count")
      ? undefined
      : json["friend_count"],
    measurementPreference: !exists(json, "measurement_preference")
      ? undefined
      : json["measurement_preference"],
    ftp: !exists(json, "ftp") ? undefined : json["ftp"],
    weight: !exists(json, "weight") ? undefined : json["weight"],
    clubs: !exists(json, "clubs")
      ? undefined
      : (json["clubs"] as Array<any>).map(SummaryClubFromJSON),
    bikes: !exists(json, "bikes")
      ? undefined
      : (json["bikes"] as Array<any>).map(SummaryGearFromJSON),
    shoes: !exists(json, "shoes")
      ? undefined
      : (json["shoes"] as Array<any>).map(SummaryGearFromJSON),
  };
}

export function DetailedAthleteToJSON(value?: DetailedAthlete | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    resource_state: value.resourceState,
    firstname: value.firstname,
    lastname: value.lastname,
    profile_medium: value.profileMedium,
    profile: value.profile,
    city: value.city,
    state: value.state,
    country: value.country,
    sex: value.sex,
    premium: value.premium,
    summit: value.summit,
    created_at:
      value.createdAt === undefined ? undefined : value.createdAt.toISOString(),
    updated_at:
      value.updatedAt === undefined ? undefined : value.updatedAt.toISOString(),
    follower_count: value.followerCount,
    friend_count: value.friendCount,
    measurement_preference: value.measurementPreference,
    ftp: value.ftp,
    weight: value.weight,
    clubs:
      value.clubs === undefined
        ? undefined
        : (value.clubs as Array<any>).map(SummaryClubToJSON),
    bikes:
      value.bikes === undefined
        ? undefined
        : (value.bikes as Array<any>).map(SummaryGearToJSON),
    shoes:
      value.shoes === undefined
        ? undefined
        : (value.shoes as Array<any>).map(SummaryGearToJSON),
  };
}
