/* tslint:disable */
/* eslint-disable */
/**
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface MovingStream
 */
export interface MovingStream {
  /**
   * The number of data points in this stream
   * @type {number}
   * @memberof MovingStream
   */
  originalSize?: number;
  /**
   * The level of detail (sampling) in which this stream was returned
   * @type {string}
   * @memberof MovingStream
   */
  resolution?: MovingStreamResolutionEnum;
  /**
   * The base series used in the case the stream was downsampled
   * @type {string}
   * @memberof MovingStream
   */
  seriesType?: MovingStreamSeriesTypeEnum;
  /**
   * The sequence of moving values for this stream, as boolean values
   * @type {Array<boolean>}
   * @memberof MovingStream
   */
  data?: Array<boolean>;
}

/**
 * @export
 */
export const MovingStreamResolutionEnum = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type MovingStreamResolutionEnum =
  (typeof MovingStreamResolutionEnum)[keyof typeof MovingStreamResolutionEnum];

/**
 * @export
 */
export const MovingStreamSeriesTypeEnum = {
  Distance: "distance",
  Time: "time",
} as const;
export type MovingStreamSeriesTypeEnum =
  (typeof MovingStreamSeriesTypeEnum)[keyof typeof MovingStreamSeriesTypeEnum];

/**
 * Check if a given object implements the MovingStream interface.
 */
export function instanceOfMovingStream(value: object): value is MovingStream {
  return true;
}

export function MovingStreamFromJSON(json: any): MovingStream {
  return MovingStreamFromJSONTyped(json, false);
}

export function MovingStreamFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): MovingStream {
  if (json == null) {
    return json;
  }
  return {
    originalSize:
      json["original_size"] == null ? undefined : json["original_size"],
    resolution: json["resolution"] == null ? undefined : json["resolution"],
    seriesType: json["series_type"] == null ? undefined : json["series_type"],
    data: json["data"] == null ? undefined : json["data"],
  };
}

export function MovingStreamToJSON(json: any): MovingStream {
  return MovingStreamToJSONTyped(json, false);
}

export function MovingStreamToJSONTyped(
  value?: MovingStream | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    original_size: value["originalSize"],
    resolution: value["resolution"],
    series_type: value["seriesType"],
    data: value["data"],
  };
}
