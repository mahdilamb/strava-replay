/* tslint:disable */
/* eslint-disable */
/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user\'s data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface AddSubscriptionsRequest {
  collectionPath: string;
  subscriptionId: string;
}

export interface DeleteSubscriptionsRequest {
  collectionPath: string;
  subscriptionId: string;
}

export interface GetSubscriptionsListRequest {
  collectionPath: string;
}

/**
 *
 */
export class SubscriptionsApi extends runtime.BaseAPI {
  /**
   * Adds a subscription in your application so that users can get notifications and return a response in the format requested. The subscription-id value provides a way to associate an update with a particular user stream in your application.
   * Add a Subscription
   */
  async addSubscriptionsRaw(
    requestParameters: AddSubscriptionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.collectionPath === null ||
      requestParameters.collectionPath === undefined
    ) {
      throw new runtime.RequiredError(
        "collectionPath",
        "Required parameter requestParameters.collectionPath was null or undefined when calling addSubscriptions.",
      );
    }

    if (
      requestParameters.subscriptionId === null ||
      requestParameters.subscriptionId === undefined
    ) {
      throw new runtime.RequiredError(
        "subscriptionId",
        "Required parameter requestParameters.subscriptionId was null or undefined when calling addSubscriptions.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/{collection-path}/apiSubscriptions/{subscription-id}.json`
          .replace(
            `{${"collection-path"}}`,
            encodeURIComponent(String(requestParameters.collectionPath)),
          )
          .replace(
            `{${"subscription-id"}}`,
            encodeURIComponent(String(requestParameters.subscriptionId)),
          ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Adds a subscription in your application so that users can get notifications and return a response in the format requested. The subscription-id value provides a way to associate an update with a particular user stream in your application.
   * Add a Subscription
   */
  async addSubscriptions(
    requestParameters: AddSubscriptionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.addSubscriptionsRaw(requestParameters, initOverrides);
  }

  /**
   * Deletes a subscription for a user..
   * Delete a Subscription
   */
  async deleteSubscriptionsRaw(
    requestParameters: DeleteSubscriptionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.collectionPath === null ||
      requestParameters.collectionPath === undefined
    ) {
      throw new runtime.RequiredError(
        "collectionPath",
        "Required parameter requestParameters.collectionPath was null or undefined when calling deleteSubscriptions.",
      );
    }

    if (
      requestParameters.subscriptionId === null ||
      requestParameters.subscriptionId === undefined
    ) {
      throw new runtime.RequiredError(
        "subscriptionId",
        "Required parameter requestParameters.subscriptionId was null or undefined when calling deleteSubscriptions.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/{collection-path}/apiSubscriptions/{subscription-id}.json`
          .replace(
            `{${"collection-path"}}`,
            encodeURIComponent(String(requestParameters.collectionPath)),
          )
          .replace(
            `{${"subscription-id"}}`,
            encodeURIComponent(String(requestParameters.subscriptionId)),
          ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes a subscription for a user..
   * Delete a Subscription
   */
  async deleteSubscriptions(
    requestParameters: DeleteSubscriptionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteSubscriptionsRaw(requestParameters, initOverrides);
  }

  /**
   * Retreives a list of a user\'s subscriptions for your application in the format requested. You can either fetch subscriptions for a specific collection or the entire list of subscriptions for the user. For best practice, make sure that your application maintains this list on your side and use this endpoint only to periodically ensure data consistency.
   * Get a List of Subscriptions
   */
  async getSubscriptionsListRaw(
    requestParameters: GetSubscriptionsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.collectionPath === null ||
      requestParameters.collectionPath === undefined
    ) {
      throw new runtime.RequiredError(
        "collectionPath",
        "Required parameter requestParameters.collectionPath was null or undefined when calling getSubscriptionsList.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "oauth2",
        [
          "activity",
          "heartrate",
          "location",
          "nutrition",
          "profile",
          "settings",
          "sleep",
          "social",
          "weight",
        ],
      );
    }

    const response = await this.request(
      {
        path: `/1/user/-/{collection-path}/apiSubscriptions.json`.replace(
          `{${"collection-path"}}`,
          encodeURIComponent(String(requestParameters.collectionPath)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retreives a list of a user\'s subscriptions for your application in the format requested. You can either fetch subscriptions for a specific collection or the entire list of subscriptions for the user. For best practice, make sure that your application maintains this list on your side and use this endpoint only to periodically ensure data consistency.
   * Get a List of Subscriptions
   */
  async getSubscriptionsList(
    requestParameters: GetSubscriptionsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getSubscriptionsListRaw(requestParameters, initOverrides);
  }
}
